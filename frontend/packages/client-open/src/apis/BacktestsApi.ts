/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  Backtest,
  BacktestMetrics,
  BacktestStatus,
  BodyLaunchBacktest,
  HTTPValidationError,
} from "../models/index";
import {
  BacktestFromJSON,
  BacktestToJSON,
  BacktestMetricsFromJSON,
  BacktestMetricsToJSON,
  BacktestStatusFromJSON,
  BacktestStatusToJSON,
  BodyLaunchBacktestFromJSON,
  BodyLaunchBacktestToJSON,
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
} from "../models/index";

export interface GetBacktestRequest {
  backtestId: string;
}

export interface GetBacktestMetricsRequest {
  backtestId: string;
  target?: boolean;
  time?: boolean;
  column?: string | null;
}

export interface GetBacktestResultsRequest {
  backtestId: string;
}

export interface GetBacktestStatusRequest {
  backtestId: string;
}

export interface GetMetricsJobRequest {
  backtestId: string;
}

export interface LaunchBacktestRequest {
  bodyLaunchBacktest: BodyLaunchBacktest;
}

export interface ListBacktestsRequest {
  policyVersionId?: string | null;
}

/**
 *
 */
export class BacktestsApi extends runtime.BaseAPI {
  /**
   * Get Backtest
   */
  async getBacktestRaw(
    requestParameters: GetBacktestRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Backtest>> {
    if (requestParameters["backtestId"] == null) {
      throw new runtime.RequiredError(
        "backtestId",
        'Required parameter "backtestId" was null or undefined when calling getBacktest().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/backtests/{backtest_id}/`;
    urlPath = urlPath.replace(
      `{${"backtest_id"}}`,
      encodeURIComponent(String(requestParameters["backtestId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      BacktestFromJSON(jsonValue),
    );
  }

  /**
   * Get Backtest
   */
  async getBacktest(
    requestParameters: GetBacktestRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Backtest> {
    const response = await this.getBacktestRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get Backtest Metrics
   */
  async getBacktestMetricsRaw(
    requestParameters: GetBacktestMetricsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["backtestId"] == null) {
      throw new runtime.RequiredError(
        "backtestId",
        'Required parameter "backtestId" was null or undefined when calling getBacktestMetrics().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["target"] != null) {
      queryParameters["target"] = requestParameters["target"];
    }

    if (requestParameters["time"] != null) {
      queryParameters["time"] = requestParameters["time"];
    }

    if (requestParameters["column"] != null) {
      queryParameters["column"] = requestParameters["column"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/backtests/{backtest_id}/metrics/data`;
    urlPath = urlPath.replace(
      `{${"backtest_id"}}`,
      encodeURIComponent(String(requestParameters["backtestId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Get Backtest Metrics
   */
  async getBacktestMetrics(
    requestParameters: GetBacktestMetricsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.getBacktestMetricsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get Backtest Results
   */
  async getBacktestResultsRaw(
    requestParameters: GetBacktestResultsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["backtestId"] == null) {
      throw new runtime.RequiredError(
        "backtestId",
        'Required parameter "backtestId" was null or undefined when calling getBacktestResults().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/backtests/{backtest_id}/results`;
    urlPath = urlPath.replace(
      `{${"backtest_id"}}`,
      encodeURIComponent(String(requestParameters["backtestId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Get Backtest Results
   */
  async getBacktestResults(
    requestParameters: GetBacktestResultsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.getBacktestResultsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get Backtest Status
   */
  async getBacktestStatusRaw(
    requestParameters: GetBacktestStatusRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<BacktestStatus>> {
    if (requestParameters["backtestId"] == null) {
      throw new runtime.RequiredError(
        "backtestId",
        'Required parameter "backtestId" was null or undefined when calling getBacktestStatus().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/backtests/{backtest_id}/status`;
    urlPath = urlPath.replace(
      `{${"backtest_id"}}`,
      encodeURIComponent(String(requestParameters["backtestId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      BacktestStatusFromJSON(jsonValue),
    );
  }

  /**
   * Get Backtest Status
   */
  async getBacktestStatus(
    requestParameters: GetBacktestStatusRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<BacktestStatus> {
    const response = await this.getBacktestStatusRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get Metrics Job
   */
  async getMetricsJobRaw(
    requestParameters: GetMetricsJobRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<BacktestMetrics>> {
    if (requestParameters["backtestId"] == null) {
      throw new runtime.RequiredError(
        "backtestId",
        'Required parameter "backtestId" was null or undefined when calling getMetricsJob().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/backtests/{backtest_id}/metrics`;
    urlPath = urlPath.replace(
      `{${"backtest_id"}}`,
      encodeURIComponent(String(requestParameters["backtestId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      BacktestMetricsFromJSON(jsonValue),
    );
  }

  /**
   * Get Metrics Job
   */
  async getMetricsJob(
    requestParameters: GetMetricsJobRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<BacktestMetrics> {
    const response = await this.getMetricsJobRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Launch Backtest
   */
  async launchBacktestRaw(
    requestParameters: LaunchBacktestRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Backtest>> {
    if (requestParameters["bodyLaunchBacktest"] == null) {
      throw new runtime.RequiredError(
        "bodyLaunchBacktest",
        'Required parameter "bodyLaunchBacktest" was null or undefined when calling launchBacktest().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/backtests/`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: BodyLaunchBacktestToJSON(requestParameters["bodyLaunchBacktest"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      BacktestFromJSON(jsonValue),
    );
  }

  /**
   * Launch Backtest
   */
  async launchBacktest(
    requestParameters: LaunchBacktestRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Backtest> {
    const response = await this.launchBacktestRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * List Backtests
   */
  async listBacktestsRaw(
    requestParameters: ListBacktestsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Backtest>>> {
    const queryParameters: any = {};

    if (requestParameters["policyVersionId"] != null) {
      queryParameters["policy_version_id"] =
        requestParameters["policyVersionId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/backtests/`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(BacktestFromJSON),
    );
  }

  /**
   * List Backtests
   */
  async listBacktests(
    requestParameters: ListBacktestsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Backtest>> {
    const response = await this.listBacktestsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
