/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  DataObject,
  DataObjectMetadata,
  DataSource,
  DataSourceEnvVar,
  DataSourceEnvVarBase,
  DataSourceSpec,
  HTTPValidationError,
} from "../models/index";
import {
  DataObjectFromJSON,
  DataObjectToJSON,
  DataObjectMetadataFromJSON,
  DataObjectMetadataToJSON,
  DataSourceFromJSON,
  DataSourceToJSON,
  DataSourceEnvVarFromJSON,
  DataSourceEnvVarToJSON,
  DataSourceEnvVarBaseFromJSON,
  DataSourceEnvVarBaseToJSON,
  DataSourceSpecFromJSON,
  DataSourceSpecToJSON,
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
} from "../models/index";

export interface CreateDataSourceRequest {
  dataSourceSpec: DataSourceSpec;
}

export interface DeleteDataSourceRequest {
  dataSourceId: string;
}

export interface GetCacheStatisticsRequest {
  dataSourceId: string;
  startDate?: Date | null;
  endDate?: Date | null;
}

export interface GetDataObjectRequest {
  dataSourceId: string;
  dataObjectId: string;
}

export interface GetDataSourceRequest {
  dataSourceId: string;
}

export interface GetDataSourceEnvVariablesRequest {
  dataSourceId: string;
}

export interface GetDataSourceMetricsRequest {
  dataSourceId: string;
  startDate?: Date | null;
  endDate?: Date | null;
}

export interface GetDataSourceUsageRequest {
  dataSourceId: string;
  startDate?: Date | null;
  endDate?: Date | null;
}

export interface ListDataObjectsRequest {
  dataSourceId: string;
}

export interface ListDataSourcesRequest {
  includeArchived?: boolean;
}

export interface SetDataSourceEnvVariablesRequest {
  dataSourceId: string;
  dataSourceEnvVarBase: Array<DataSourceEnvVarBase>;
}

/**
 *
 */
export class DataSourcesApi extends runtime.BaseAPI {
  /**
   * Create Data Source
   */
  async createDataSourceRaw(
    requestParameters: CreateDataSourceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["dataSourceSpec"] == null) {
      throw new runtime.RequiredError(
        "dataSourceSpec",
        'Required parameter "dataSourceSpec" was null or undefined when calling createDataSource().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/data-sources/`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: DataSourceSpecToJSON(requestParameters["dataSourceSpec"]),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Create Data Source
   */
  async createDataSource(
    requestParameters: CreateDataSourceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.createDataSourceRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Delete Data Source
   */
  async deleteDataSourceRaw(
    requestParameters: DeleteDataSourceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["dataSourceId"] == null) {
      throw new runtime.RequiredError(
        "dataSourceId",
        'Required parameter "dataSourceId" was null or undefined when calling deleteDataSource().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/data-sources/{data_source_id}`;
    urlPath = urlPath.replace(
      `{${"data_source_id"}}`,
      encodeURIComponent(String(requestParameters["dataSourceId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Delete Data Source
   */
  async deleteDataSource(
    requestParameters: DeleteDataSourceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.deleteDataSourceRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get cache hit ratio and other cache statistics for a data source
   * Get Cache Statistics
   */
  async getCacheStatisticsRaw(
    requestParameters: GetCacheStatisticsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<{ [key: string]: any }>> {
    if (requestParameters["dataSourceId"] == null) {
      throw new runtime.RequiredError(
        "dataSourceId",
        'Required parameter "dataSourceId" was null or undefined when calling getCacheStatistics().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["startDate"] != null) {
      queryParameters["start_date"] = (requestParameters["startDate"] as any)
        .toISOString()
        .substring(0, 10);
    }

    if (requestParameters["endDate"] != null) {
      queryParameters["end_date"] = (requestParameters["endDate"] as any)
        .toISOString()
        .substring(0, 10);
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/data-sources/{data_source_id}/cache-stats`;
    urlPath = urlPath.replace(
      `{${"data_source_id"}}`,
      encodeURIComponent(String(requestParameters["dataSourceId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Get cache hit ratio and other cache statistics for a data source
   * Get Cache Statistics
   */
  async getCacheStatistics(
    requestParameters: GetCacheStatisticsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<{ [key: string]: any }> {
    const response = await this.getCacheStatisticsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get Data Object
   */
  async getDataObjectRaw(
    requestParameters: GetDataObjectRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<DataObject>> {
    if (requestParameters["dataSourceId"] == null) {
      throw new runtime.RequiredError(
        "dataSourceId",
        'Required parameter "dataSourceId" was null or undefined when calling getDataObject().',
      );
    }

    if (requestParameters["dataObjectId"] == null) {
      throw new runtime.RequiredError(
        "dataObjectId",
        'Required parameter "dataObjectId" was null or undefined when calling getDataObject().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/data-sources/{data_source_id}/objects/{data_object_id}`;
    urlPath = urlPath.replace(
      `{${"data_source_id"}}`,
      encodeURIComponent(String(requestParameters["dataSourceId"])),
    );
    urlPath = urlPath.replace(
      `{${"data_object_id"}}`,
      encodeURIComponent(String(requestParameters["dataObjectId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DataObjectFromJSON(jsonValue),
    );
  }

  /**
   * Get Data Object
   */
  async getDataObject(
    requestParameters: GetDataObjectRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<DataObject> {
    const response = await this.getDataObjectRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get Data Source
   */
  async getDataSourceRaw(
    requestParameters: GetDataSourceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<DataSource>> {
    if (requestParameters["dataSourceId"] == null) {
      throw new runtime.RequiredError(
        "dataSourceId",
        'Required parameter "dataSourceId" was null or undefined when calling getDataSource().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/data-sources/{data_source_id}`;
    urlPath = urlPath.replace(
      `{${"data_source_id"}}`,
      encodeURIComponent(String(requestParameters["dataSourceId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DataSourceFromJSON(jsonValue),
    );
  }

  /**
   * Get Data Source
   */
  async getDataSource(
    requestParameters: GetDataSourceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<DataSource> {
    const response = await this.getDataSourceRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get Data Source Env Variables
   */
  async getDataSourceEnvVariablesRaw(
    requestParameters: GetDataSourceEnvVariablesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<DataSourceEnvVar>>> {
    if (requestParameters["dataSourceId"] == null) {
      throw new runtime.RequiredError(
        "dataSourceId",
        'Required parameter "dataSourceId" was null or undefined when calling getDataSourceEnvVariables().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/data-sources/{data_source_id}/variables`;
    urlPath = urlPath.replace(
      `{${"data_source_id"}}`,
      encodeURIComponent(String(requestParameters["dataSourceId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(DataSourceEnvVarFromJSON),
    );
  }

  /**
   * Get Data Source Env Variables
   */
  async getDataSourceEnvVariables(
    requestParameters: GetDataSourceEnvVariablesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<DataSourceEnvVar>> {
    const response = await this.getDataSourceEnvVariablesRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get performance metrics for a data source over time
   * Get Data Source Metrics
   */
  async getDataSourceMetricsRaw(
    requestParameters: GetDataSourceMetricsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<{ [key: string]: any }>> {
    if (requestParameters["dataSourceId"] == null) {
      throw new runtime.RequiredError(
        "dataSourceId",
        'Required parameter "dataSourceId" was null or undefined when calling getDataSourceMetrics().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["startDate"] != null) {
      queryParameters["start_date"] = (requestParameters["startDate"] as any)
        .toISOString()
        .substring(0, 10);
    }

    if (requestParameters["endDate"] != null) {
      queryParameters["end_date"] = (requestParameters["endDate"] as any)
        .toISOString()
        .substring(0, 10);
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/data-sources/{data_source_id}/metrics`;
    urlPath = urlPath.replace(
      `{${"data_source_id"}}`,
      encodeURIComponent(String(requestParameters["dataSourceId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Get performance metrics for a data source over time
   * Get Data Source Metrics
   */
  async getDataSourceMetrics(
    requestParameters: GetDataSourceMetricsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<{ [key: string]: any }> {
    const response = await this.getDataSourceMetricsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get Data Source Usage
   */
  async getDataSourceUsageRaw(
    requestParameters: GetDataSourceUsageRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<{ [key: string]: any }>> {
    if (requestParameters["dataSourceId"] == null) {
      throw new runtime.RequiredError(
        "dataSourceId",
        'Required parameter "dataSourceId" was null or undefined when calling getDataSourceUsage().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["startDate"] != null) {
      queryParameters["start_date"] = (requestParameters["startDate"] as any)
        .toISOString()
        .substring(0, 10);
    }

    if (requestParameters["endDate"] != null) {
      queryParameters["end_date"] = (requestParameters["endDate"] as any)
        .toISOString()
        .substring(0, 10);
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/data-sources/{data_source_id}/usage`;
    urlPath = urlPath.replace(
      `{${"data_source_id"}}`,
      encodeURIComponent(String(requestParameters["dataSourceId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Get Data Source Usage
   */
  async getDataSourceUsage(
    requestParameters: GetDataSourceUsageRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<{ [key: string]: any }> {
    const response = await this.getDataSourceUsageRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * List Data Objects
   */
  async listDataObjectsRaw(
    requestParameters: ListDataObjectsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<DataObjectMetadata>>> {
    if (requestParameters["dataSourceId"] == null) {
      throw new runtime.RequiredError(
        "dataSourceId",
        'Required parameter "dataSourceId" was null or undefined when calling listDataObjects().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/data-sources/{data_source_id}/objects`;
    urlPath = urlPath.replace(
      `{${"data_source_id"}}`,
      encodeURIComponent(String(requestParameters["dataSourceId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(DataObjectMetadataFromJSON),
    );
  }

  /**
   * List Data Objects
   */
  async listDataObjects(
    requestParameters: ListDataObjectsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<DataObjectMetadata>> {
    const response = await this.listDataObjectsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * List Data Sources
   */
  async listDataSourcesRaw(
    requestParameters: ListDataSourcesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<DataSource>>> {
    const queryParameters: any = {};

    if (requestParameters["includeArchived"] != null) {
      queryParameters["include_archived"] =
        requestParameters["includeArchived"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/data-sources/`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(DataSourceFromJSON),
    );
  }

  /**
   * List Data Sources
   */
  async listDataSources(
    requestParameters: ListDataSourcesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<DataSource>> {
    const response = await this.listDataSourcesRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Set Data Source Env Variables
   */
  async setDataSourceEnvVariablesRaw(
    requestParameters: SetDataSourceEnvVariablesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["dataSourceId"] == null) {
      throw new runtime.RequiredError(
        "dataSourceId",
        'Required parameter "dataSourceId" was null or undefined when calling setDataSourceEnvVariables().',
      );
    }

    if (requestParameters["dataSourceEnvVarBase"] == null) {
      throw new runtime.RequiredError(
        "dataSourceEnvVarBase",
        'Required parameter "dataSourceEnvVarBase" was null or undefined when calling setDataSourceEnvVariables().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/data-sources/{data_source_id}/variables`;
    urlPath = urlPath.replace(
      `{${"data_source_id"}}`,
      encodeURIComponent(String(requestParameters["dataSourceId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["dataSourceEnvVarBase"]!.map(
          DataSourceEnvVarBaseToJSON,
        ),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Set Data Source Env Variables
   */
  async setDataSourceEnvVariables(
    requestParameters: SetDataSourceEnvVariablesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.setDataSourceEnvVariablesRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
