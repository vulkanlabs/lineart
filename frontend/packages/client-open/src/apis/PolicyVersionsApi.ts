/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  BodyCreateRunByPolicyVersion,
  BodyRunWorkflow,
  ConfigurationVariables,
  ConfigurationVariablesBase,
  DataSourceReference,
  HTTPValidationError,
  PolicyVersion,
  PolicyVersionBase,
  PolicyVersionCreate,
  Run,
  RunResult,
} from "../models/index";
import {
  BodyCreateRunByPolicyVersionFromJSON,
  BodyCreateRunByPolicyVersionToJSON,
  BodyRunWorkflowFromJSON,
  BodyRunWorkflowToJSON,
  ConfigurationVariablesFromJSON,
  ConfigurationVariablesToJSON,
  ConfigurationVariablesBaseFromJSON,
  ConfigurationVariablesBaseToJSON,
  DataSourceReferenceFromJSON,
  DataSourceReferenceToJSON,
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
  PolicyVersionFromJSON,
  PolicyVersionToJSON,
  PolicyVersionBaseFromJSON,
  PolicyVersionBaseToJSON,
  PolicyVersionCreateFromJSON,
  PolicyVersionCreateToJSON,
  RunFromJSON,
  RunToJSON,
  RunResultFromJSON,
  RunResultToJSON,
} from "../models/index";

export interface CreatePolicyVersionRequest {
  policyVersionCreate: PolicyVersionCreate;
}

export interface CreateRunByPolicyVersionRequest {
  policyVersionId: string;
  bodyCreateRunByPolicyVersion: BodyCreateRunByPolicyVersion;
}

export interface DeletePolicyVersionRequest {
  policyVersionId: string;
}

export interface GetPolicyVersionRequest {
  policyVersionId: string;
}

export interface ListConfigVariablesRequest {
  policyVersionId: string;
}

export interface ListDataSourcesByPolicyVersionRequest {
  policyVersionId: string;
}

export interface ListPolicyVersionsRequest {
  policyId?: string | null;
  archived?: boolean;
}

export interface ListRunsByPolicyVersionRequest {
  policyVersionId: string;
  startDate?: Date | null;
  endDate?: Date | null;
}

export interface RunWorkflowRequest {
  policyVersionId: string;
  bodyRunWorkflow: BodyRunWorkflow;
  pollingIntervalMs?: number;
  pollingTimeoutMs?: number;
}

export interface SetConfigVariablesRequest {
  policyVersionId: string;
  configurationVariablesBase: Array<ConfigurationVariablesBase>;
}

export interface UpdatePolicyVersionRequest {
  policyVersionId: string;
  policyVersionBase: PolicyVersionBase;
}

/**
 *
 */
export class PolicyVersionsApi extends runtime.BaseAPI {
  /**
   * Create Policy Version
   */
  async createPolicyVersionRaw(
    requestParameters: CreatePolicyVersionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PolicyVersion>> {
    if (requestParameters["policyVersionCreate"] == null) {
      throw new runtime.RequiredError(
        "policyVersionCreate",
        'Required parameter "policyVersionCreate" was null or undefined when calling createPolicyVersion().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/policy-versions`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: PolicyVersionCreateToJSON(
          requestParameters["policyVersionCreate"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PolicyVersionFromJSON(jsonValue),
    );
  }

  /**
   * Create Policy Version
   */
  async createPolicyVersion(
    requestParameters: CreatePolicyVersionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PolicyVersion> {
    const response = await this.createPolicyVersionRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Create Run By Policy Version
   */
  async createRunByPolicyVersionRaw(
    requestParameters: CreateRunByPolicyVersionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["policyVersionId"] == null) {
      throw new runtime.RequiredError(
        "policyVersionId",
        'Required parameter "policyVersionId" was null or undefined when calling createRunByPolicyVersion().',
      );
    }

    if (requestParameters["bodyCreateRunByPolicyVersion"] == null) {
      throw new runtime.RequiredError(
        "bodyCreateRunByPolicyVersion",
        'Required parameter "bodyCreateRunByPolicyVersion" was null or undefined when calling createRunByPolicyVersion().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/policy-versions/{policy_version_id}/runs`;
    urlPath = urlPath.replace(
      `{${"policy_version_id"}}`,
      encodeURIComponent(String(requestParameters["policyVersionId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: BodyCreateRunByPolicyVersionToJSON(
          requestParameters["bodyCreateRunByPolicyVersion"],
        ),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Create Run By Policy Version
   */
  async createRunByPolicyVersion(
    requestParameters: CreateRunByPolicyVersionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.createRunByPolicyVersionRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Delete Policy Version
   */
  async deletePolicyVersionRaw(
    requestParameters: DeletePolicyVersionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["policyVersionId"] == null) {
      throw new runtime.RequiredError(
        "policyVersionId",
        'Required parameter "policyVersionId" was null or undefined when calling deletePolicyVersion().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/policy-versions/{policy_version_id}`;
    urlPath = urlPath.replace(
      `{${"policy_version_id"}}`,
      encodeURIComponent(String(requestParameters["policyVersionId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Delete Policy Version
   */
  async deletePolicyVersion(
    requestParameters: DeletePolicyVersionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.deletePolicyVersionRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get Policy Version
   */
  async getPolicyVersionRaw(
    requestParameters: GetPolicyVersionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PolicyVersion>> {
    if (requestParameters["policyVersionId"] == null) {
      throw new runtime.RequiredError(
        "policyVersionId",
        'Required parameter "policyVersionId" was null or undefined when calling getPolicyVersion().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/policy-versions/{policy_version_id}`;
    urlPath = urlPath.replace(
      `{${"policy_version_id"}}`,
      encodeURIComponent(String(requestParameters["policyVersionId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PolicyVersionFromJSON(jsonValue),
    );
  }

  /**
   * Get Policy Version
   */
  async getPolicyVersion(
    requestParameters: GetPolicyVersionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PolicyVersion> {
    const response = await this.getPolicyVersionRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * List Config Variables
   */
  async listConfigVariablesRaw(
    requestParameters: ListConfigVariablesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<ConfigurationVariables>>> {
    if (requestParameters["policyVersionId"] == null) {
      throw new runtime.RequiredError(
        "policyVersionId",
        'Required parameter "policyVersionId" was null or undefined when calling listConfigVariables().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/policy-versions/{policy_version_id}/variables`;
    urlPath = urlPath.replace(
      `{${"policy_version_id"}}`,
      encodeURIComponent(String(requestParameters["policyVersionId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(ConfigurationVariablesFromJSON),
    );
  }

  /**
   * List Config Variables
   */
  async listConfigVariables(
    requestParameters: ListConfigVariablesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<ConfigurationVariables>> {
    const response = await this.listConfigVariablesRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * List Data Sources By Policy Version
   */
  async listDataSourcesByPolicyVersionRaw(
    requestParameters: ListDataSourcesByPolicyVersionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<DataSourceReference>>> {
    if (requestParameters["policyVersionId"] == null) {
      throw new runtime.RequiredError(
        "policyVersionId",
        'Required parameter "policyVersionId" was null or undefined when calling listDataSourcesByPolicyVersion().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/policy-versions/{policy_version_id}/data-sources`;
    urlPath = urlPath.replace(
      `{${"policy_version_id"}}`,
      encodeURIComponent(String(requestParameters["policyVersionId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(DataSourceReferenceFromJSON),
    );
  }

  /**
   * List Data Sources By Policy Version
   */
  async listDataSourcesByPolicyVersion(
    requestParameters: ListDataSourcesByPolicyVersionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<DataSourceReference>> {
    const response = await this.listDataSourcesByPolicyVersionRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * List Policy Versions
   */
  async listPolicyVersionsRaw(
    requestParameters: ListPolicyVersionsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<PolicyVersion>>> {
    const queryParameters: any = {};

    if (requestParameters["policyId"] != null) {
      queryParameters["policy_id"] = requestParameters["policyId"];
    }

    if (requestParameters["archived"] != null) {
      queryParameters["archived"] = requestParameters["archived"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/policy-versions`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(PolicyVersionFromJSON),
    );
  }

  /**
   * List Policy Versions
   */
  async listPolicyVersions(
    requestParameters: ListPolicyVersionsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<PolicyVersion>> {
    const response = await this.listPolicyVersionsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * List Runs By Policy Version
   */
  async listRunsByPolicyVersionRaw(
    requestParameters: ListRunsByPolicyVersionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Run>>> {
    if (requestParameters["policyVersionId"] == null) {
      throw new runtime.RequiredError(
        "policyVersionId",
        'Required parameter "policyVersionId" was null or undefined when calling listRunsByPolicyVersion().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["startDate"] != null) {
      queryParameters["start_date"] = (requestParameters["startDate"] as any)
        .toISOString()
        .substring(0, 10);
    }

    if (requestParameters["endDate"] != null) {
      queryParameters["end_date"] = (requestParameters["endDate"] as any)
        .toISOString()
        .substring(0, 10);
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/policy-versions/{policy_version_id}/runs`;
    urlPath = urlPath.replace(
      `{${"policy_version_id"}}`,
      encodeURIComponent(String(requestParameters["policyVersionId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(RunFromJSON),
    );
  }

  /**
   * List Runs By Policy Version
   */
  async listRunsByPolicyVersion(
    requestParameters: ListRunsByPolicyVersionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Run>> {
    const response = await this.listRunsByPolicyVersionRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Run Workflow
   */
  async runWorkflowRaw(
    requestParameters: RunWorkflowRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RunResult>> {
    if (requestParameters["policyVersionId"] == null) {
      throw new runtime.RequiredError(
        "policyVersionId",
        'Required parameter "policyVersionId" was null or undefined when calling runWorkflow().',
      );
    }

    if (requestParameters["bodyRunWorkflow"] == null) {
      throw new runtime.RequiredError(
        "bodyRunWorkflow",
        'Required parameter "bodyRunWorkflow" was null or undefined when calling runWorkflow().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["pollingIntervalMs"] != null) {
      queryParameters["polling_interval_ms"] =
        requestParameters["pollingIntervalMs"];
    }

    if (requestParameters["pollingTimeoutMs"] != null) {
      queryParameters["polling_timeout_ms"] =
        requestParameters["pollingTimeoutMs"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/policy-versions/{policy_version_id}/run`;
    urlPath = urlPath.replace(
      `{${"policy_version_id"}}`,
      encodeURIComponent(String(requestParameters["policyVersionId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: BodyRunWorkflowToJSON(requestParameters["bodyRunWorkflow"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RunResultFromJSON(jsonValue),
    );
  }

  /**
   * Run Workflow
   */
  async runWorkflow(
    requestParameters: RunWorkflowRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RunResult> {
    const response = await this.runWorkflowRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Set Config Variables
   */
  async setConfigVariablesRaw(
    requestParameters: SetConfigVariablesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["policyVersionId"] == null) {
      throw new runtime.RequiredError(
        "policyVersionId",
        'Required parameter "policyVersionId" was null or undefined when calling setConfigVariables().',
      );
    }

    if (requestParameters["configurationVariablesBase"] == null) {
      throw new runtime.RequiredError(
        "configurationVariablesBase",
        'Required parameter "configurationVariablesBase" was null or undefined when calling setConfigVariables().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/policy-versions/{policy_version_id}/variables`;
    urlPath = urlPath.replace(
      `{${"policy_version_id"}}`,
      encodeURIComponent(String(requestParameters["policyVersionId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["configurationVariablesBase"]!.map(
          ConfigurationVariablesBaseToJSON,
        ),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Set Config Variables
   */
  async setConfigVariables(
    requestParameters: SetConfigVariablesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.setConfigVariablesRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Update Policy Version
   */
  async updatePolicyVersionRaw(
    requestParameters: UpdatePolicyVersionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PolicyVersion>> {
    if (requestParameters["policyVersionId"] == null) {
      throw new runtime.RequiredError(
        "policyVersionId",
        'Required parameter "policyVersionId" was null or undefined when calling updatePolicyVersion().',
      );
    }

    if (requestParameters["policyVersionBase"] == null) {
      throw new runtime.RequiredError(
        "policyVersionBase",
        'Required parameter "policyVersionBase" was null or undefined when calling updatePolicyVersion().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/policy-versions/{policy_version_id}`;
    urlPath = urlPath.replace(
      `{${"policy_version_id"}}`,
      encodeURIComponent(String(requestParameters["policyVersionId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: PolicyVersionBaseToJSON(requestParameters["policyVersionBase"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PolicyVersionFromJSON(jsonValue),
    );
  }

  /**
   * Update Policy Version
   */
  async updatePolicyVersion(
    requestParameters: UpdatePolicyVersionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PolicyVersion> {
    const response = await this.updatePolicyVersionRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
