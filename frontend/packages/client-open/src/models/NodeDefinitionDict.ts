/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { DependencyDict } from "./DependencyDict";
import {
  DependencyDictFromJSON,
  DependencyDictFromJSONTyped,
  DependencyDictToJSON,
  DependencyDictToJSONTyped,
} from "./DependencyDict";

/**
 * Dict representation of a NodeDefinition object.
 * @export
 * @interface NodeDefinitionDict
 */
export interface NodeDefinitionDict {
  /**
   *
   * @type {string}
   * @memberof NodeDefinitionDict
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof NodeDefinitionDict
   */
  node_type: string;
  /**
   *
   * @type {{ [key: string]: DependencyDict; }}
   * @memberof NodeDefinitionDict
   */
  dependencies?: { [key: string]: DependencyDict } | null;
  /**
   *
   * @type {{ [key: string]: any; }}
   * @memberof NodeDefinitionDict
   */
  metadata?: { [key: string]: any } | null;
  /**
   *
   * @type {string}
   * @memberof NodeDefinitionDict
   */
  description?: string | null;
  /**
   *
   * @type {Array<string>}
   * @memberof NodeDefinitionDict
   */
  hierarchy?: Array<string> | null;
}

/**
 * Check if a given object implements the NodeDefinitionDict interface.
 */
export function instanceOfNodeDefinitionDict(
  value: object,
): value is NodeDefinitionDict {
  if (!("name" in value) || value["name"] === undefined) return false;
  if (!("node_type" in value) || value["node_type"] === undefined) return false;
  return true;
}

export function NodeDefinitionDictFromJSON(json: any): NodeDefinitionDict {
  return NodeDefinitionDictFromJSONTyped(json, false);
}

export function NodeDefinitionDictFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): NodeDefinitionDict {
  if (json == null) {
    return json;
  }
  return {
    name: json["name"],
    node_type: json["node_type"],
    dependencies:
      json["dependencies"] == null
        ? undefined
        : mapValues(json["dependencies"], DependencyDictFromJSON),
    metadata: json["metadata"] == null ? undefined : json["metadata"],
    description: json["description"] == null ? undefined : json["description"],
    hierarchy: json["hierarchy"] == null ? undefined : json["hierarchy"],
  };
}

export function NodeDefinitionDictToJSON(json: any): NodeDefinitionDict {
  return NodeDefinitionDictToJSONTyped(json, false);
}

export function NodeDefinitionDictToJSONTyped(
  value?: NodeDefinitionDict | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    name: value["name"],
    node_type: value["node_type"],
    dependencies:
      value["dependencies"] == null
        ? undefined
        : mapValues(value["dependencies"], DependencyDictToJSON),
    metadata: value["metadata"],
    description: value["description"],
    hierarchy: value["hierarchy"],
  };
}
