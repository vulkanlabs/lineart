openapi: "3.1.0"
info:
  title: "VulkanAPI"
  version: "0.1.0"
paths:
  "/components/":
    get:
      tags:
        - "components"
      summary: "List Components"
      description: "List all components."
      operationId: "list_components"
      parameters:
        - name: "include_archived"
          in: "query"
          required: false
          schema:
            type: "boolean"
            default: false
            title: "Include Archived"
        - name: "project_id"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "Project Id"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema:
                type: "array"
                items: {"$ref": "#/components/schemas/Component"}
                title: "Response List Components"
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-name-override: "list"
    post:
      tags:
        - "components"
      summary: "Create Component"
      description: "Create a new component."
      operationId: "create_component"
      parameters:
        - name: "project_id"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "Project Id"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/ComponentBase"}
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Component"}
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-name-override: "create"
  "/components/{component_name}":
    get:
      tags:
        - "components"
      summary: "Get Component"
      description: "Get a component by name."
      operationId: "get_component"
      parameters:
        - name: "component_name"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Component Name"
        - name: "project_id"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "Project Id"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Component"}
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
    put:
      tags:
        - "components"
      summary: "Update Component"
      description: "Update a component by name."
      operationId: "update_component"
      parameters:
        - name: "component_name"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Component Name"
        - name: "project_id"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "Project Id"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/ComponentUpdate"}
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Component"}
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
    delete:
      tags:
        - "components"
      summary: "Delete Component"
      description: "Delete (archive) a component."
      operationId: "delete_component"
      parameters:
        - name: "component_name"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Component Name"
        - name: "project_id"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "Project Id"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {}
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
  "/data-sources/":
    get:
      tags:
        - "data-sources"
      summary: "List Data Sources"
      description: "List all data sources. Optionally filter by status (e.g., 'PUBLISHED', 'DRAFT')."
      operationId: "list_data_sources"
      parameters:
        - name: "include_archived"
          in: "query"
          required: false
          schema:
            type: "boolean"
            default: false
            title: "Include Archived"
        - name: "status"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "Status"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema:
                type: "array"
                items: {"$ref": "#/components/schemas/DataSource"}
                title: "Response List Data Sources"
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-group: "dataSources"
      x-speakeasy-name-override: "list"
    post:
      tags:
        - "data-sources"
      summary: "Create Data Source"
      description: "Create a new data source."
      operationId: "create_data_source"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/DataSourceSpec"}
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/DataSource"}
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-group: "dataSources"
      x-speakeasy-name-override: "create"
  "/data-sources/{data_source_id}":
    get:
      tags:
        - "data-sources"
      summary: "Get Data Source"
      description: "Get a data source by ID."
      operationId: "get_data_source"
      parameters:
        - name: "data_source_id"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Data Source Id"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/DataSource"}
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-group: "dataSources"
      x-speakeasy-name-override: "get"
    put:
      tags:
        - "data-sources"
      summary: "Update Data Source"
      description: "Update a data source."
      operationId: "update_data_source"
      parameters:
        - name: "data_source_id"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Data Source Id"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/DataSourceSpec"}
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/DataSource"}
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
    delete:
      tags:
        - "data-sources"
      summary: "Delete Data Source"
      description: "Delete (archive) a data source."
      operationId: "delete_data_source"
      parameters:
        - name: "data_source_id"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Data Source Id"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {}
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-group: "dataSources"
      x-speakeasy-name-override: "delete"
  "/data-sources/{data_source_id}/variables":
    put:
      tags:
        - "data-sources"
      summary: "Set Data Source Env Variables"
      description: "Set environment variables for a data source."
      operationId: "set_data_source_env_variables"
      parameters:
        - name: "data_source_id"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Data Source Id"
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: "array"
              items: {"$ref": "#/components/schemas/DataSourceEnvVarBase"}
              title: "Desired Variables"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {}
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-group: "dataSources"
      x-speakeasy-name-override: "setEnvVariables"
    get:
      tags:
        - "data-sources"
      summary: "Get Data Source Env Variables"
      description: "Get environment variables for a data source."
      operationId: "get_data_source_env_variables"
      parameters:
        - name: "data_source_id"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Data Source Id"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema:
                type: "array"
                items: {"$ref": "#/components/schemas/DataSourceEnvVar"}
                title: "Response Get Data Source Env Variables"
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-name-override: "getEnvVariables"
  "/data-sources/{data_source_id}/objects":
    get:
      tags:
        - "data-sources"
      summary: "List Data Objects"
      description: "List data objects for a data source."
      operationId: "list_data_objects"
      parameters:
        - name: "data_source_id"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Data Source Id"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema:
                type: "array"
                items: {"$ref": "#/components/schemas/DataObjectMetadata"}
                title: "Response List Data Objects"
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-name-override: "listDataObjects"
  "/data-sources/{data_source_id}/objects/{data_object_id}":
    get:
      tags:
        - "data-sources"
      summary: "Get Data Object"
      description: "Get a specific data object."
      operationId: "get_data_object"
      parameters:
        - name: "data_source_id"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Data Source Id"
        - name: "data_object_id"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Data Object Id"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/DataObject"}
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-group: "dataSources"
      x-speakeasy-name-override: "getObject"
  "/data-sources/{data_source_id}/usage":
    get:
      tags:
        - "data-sources"
      summary: "Get Data Source Usage"
      description: "Get usage statistics for a data source."
      operationId: "get_data_source_usage"
      parameters:
        - name: "data_source_id"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Data Source Id"
        - name: "start_date"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
                format: "date"
              - type: "null"
            title: "Start Date"
        - name: "end_date"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
                format: "date"
              - type: "null"
            title: "End Date"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema:
                type: "object"
                additionalProperties: true
                title: "Response Get Data Source Usage"
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-name-override: "getUsage"
  "/data-sources/{data_source_id}/metrics":
    get:
      tags:
        - "data-sources"
      summary: "Get Data Source Metrics"
      description: "Get performance metrics for a data source."
      operationId: "get_data_source_metrics"
      parameters:
        - name: "data_source_id"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Data Source Id"
        - name: "start_date"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
                format: "date"
              - type: "null"
            title: "Start Date"
        - name: "end_date"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
                format: "date"
              - type: "null"
            title: "End Date"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema:
                type: "object"
                additionalProperties: true
                title: "Response Get Data Source Metrics"
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-group: "dataSources"
      x-speakeasy-name-override: "getMetrics"
  "/data-sources/{data_source_id}/cache-stats":
    get:
      tags:
        - "data-sources"
      summary: "Get Cache Statistics"
      description: "Get cache statistics for a data source."
      operationId: "get_cache_statistics"
      parameters:
        - name: "data_source_id"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Data Source Id"
        - name: "start_date"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
                format: "date"
              - type: "null"
            title: "Start Date"
        - name: "end_date"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
                format: "date"
              - type: "null"
            title: "End Date"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema:
                type: "object"
                additionalProperties: true
                title: "Response Get Cache Statistics"
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-group: "dataSources"
      x-speakeasy-name-override: "getCacheStatistics"
  "/data-sources/{data_source_id}/publish":
    post:
      tags:
        - "data-sources"
      summary: "Publish Data Source"
      description: "Publish a data source."
      operationId: "publish_data_source"
      parameters:
        - name: "data_source_id"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Data Source Id"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/DataSource"}
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
  "/data-sources/test":
    post:
      tags:
        - "data-sources"
      summary: "Test Data Source"
      description: "Test a data source configuration."
      operationId: "test_data_source"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/DataSourceTestRequest"}
        required: true
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/DataSourceTestResponse"}
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
  "/data-sources/{data_source_id}/test":
    post:
      tags:
        - "data-sources"
      summary: "Test Data Source By Id"
      description: "Test an existing data source with optional runtime parameters.\n\nBackend fetches the data source configuration and merges with runtime parameters\nand environment variables before executing the test."
      operationId: "test_data_source_by_id"
      parameters:
        - name: "data_source_id"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Data Source Id"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/DataSourceTestParams"}
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/DataSourceTestResponse"}
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
  "/internal/run-version-sync":
    post:
      tags:
        - "internal"
      summary: "Run Version Sync"
      description: "Execute a workflow and wait for results."
      operationId: "run_version_sync"
      parameters:
        - name: "polling_interval_ms"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 500
            title: "Polling Interval Ms"
        - name: "polling_timeout_ms"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 300000
            title: "Polling Timeout Ms"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/Body_run_version_sync"}
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RunResult"}
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-name-override: "runVersionSync"
  "/internal/data-broker":
    post:
      tags:
        - "internal"
      summary: "Request Data From Broker"
      description: "Request data through the data broker."
      operationId: "request_data_from_broker"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/DataBrokerRequest"}
        required: true
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/DataBrokerResponse"}
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-name-override: "requestDataFromBroker"
  "/internal/runs/{run_id}/metadata":
    post:
      tags:
        - "internal"
      summary: "Publish Metadata"
      description: "Publish metadata for a run step."
      operationId: "publish_metadata"
      parameters:
        - name: "run_id"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
            title: "Run Id"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/StepMetadataBase"}
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {}
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-name-override: "publishMetadata"
  "/internal/runs/{run_id}":
    put:
      tags:
        - "internal"
      summary: "Update Run"
      description: "Update run status and optionally trigger shadow runs."
      operationId: "update_run"
      parameters:
        - name: "run_id"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
            title: "Run Id"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/Body_update_run"}
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Run"}
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-name-override: "updateRun"
  "/policies/":
    get:
      tags:
        - "policies"
      summary: "List Policies"
      description: "List all policies."
      operationId: "list_policies"
      parameters:
        - name: "include_archived"
          in: "query"
          required: false
          schema:
            type: "boolean"
            default: false
            title: "Include Archived"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema:
                type: "array"
                items: {"$ref": "#/components/schemas/Policy"}
                title: "Response List Policies"
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-name-override: "list"
    post:
      tags:
        - "policies"
      summary: "Create Policy"
      description: "Create a new policy."
      operationId: "create_policy"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/PolicyCreate"}
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Policy"}
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-name-override: "create"
  "/policies/{policy_id}":
    get:
      tags:
        - "policies"
      summary: "Get Policy"
      description: "Get a policy by ID."
      operationId: "get_policy"
      parameters:
        - name: "policy_id"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Policy Id"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Policy"}
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-name-override: "get"
    put:
      tags:
        - "policies"
      summary: "Update Policy"
      description: "Update a policy."
      operationId: "update_policy"
      parameters:
        - name: "policy_id"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Policy Id"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/PolicyBase"}
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Policy"}
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-name-override: "update"
    delete:
      tags:
        - "policies"
      summary: "Delete Policy"
      description: "Delete (archive) a policy."
      operationId: "delete_policy"
      parameters:
        - name: "policy_id"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Policy Id"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {}
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-name-override: "delete"
  "/policies/{policy_id}/versions":
    get:
      tags:
        - "policies"
      summary: "List Policy Versions By Policy"
      description: "List versions for a policy."
      operationId: "list_policy_versions_by_policy"
      parameters:
        - name: "policy_id"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Policy Id"
        - name: "include_archived"
          in: "query"
          required: false
          schema:
            type: "boolean"
            default: false
            title: "Include Archived"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema:
                type: "array"
                items: {"$ref": "#/components/schemas/PolicyVersion"}
                title: "Response List Policy Versions By Policy"
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-name-override: "listVersions"
  "/policies/{policy_id}/runs":
    get:
      tags:
        - "policies"
      summary: "List Runs By Policy"
      description: "List runs for a policy."
      operationId: "list_runs_by_policy"
      parameters:
        - name: "policy_id"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Policy Id"
        - name: "start_date"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
                format: "date"
              - type: "null"
            title: "Start Date"
        - name: "end_date"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
                format: "date"
              - type: "null"
            title: "End Date"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema:
                type: "array"
                items: {"$ref": "#/components/schemas/Run"}
                title: "Response List Runs By Policy"
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-name-override: "listRuns"
    post:
      tags:
        - "policies"
      summary: "Create Run Group"
      description: "Create a run group and allocate runs."
      operationId: "create_run_group"
      parameters:
        - name: "policy_id"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Policy Id"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/Body_create_run_group"}
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RunGroupResult"}
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-name-override: "createRunGroup"
  "/policies/{policy_id}/runs/duration/query":
    post:
      tags:
        - "policies"
      summary: "Run Duration Stats By Policy"
      description: "Get run duration statistics for a policy."
      operationId: "run_duration_stats_by_policy"
      parameters:
        - name: "policy_id"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Policy Id"
        - name: "start_date"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
                format: "date"
              - type: "null"
            title: "Start Date"
        - name: "end_date"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
                format: "date"
              - type: "null"
            title: "End Date"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/Body_run_duration_stats_by_policy"}
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema:
                type: "array"
                items: {}
                title: "Response Run Duration Stats By Policy"
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
  "/policies/{policy_id}/runs/duration/by_status/query":
    post:
      tags:
        - "policies"
      summary: "Run Duration Stats By Policy Status"
      description: "Get run duration statistics grouped by status."
      operationId: "run_duration_stats_by_policy_status"
      parameters:
        - name: "policy_id"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Policy Id"
        - name: "start_date"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
                format: "date"
              - type: "null"
            title: "Start Date"
        - name: "end_date"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
                format: "date"
              - type: "null"
            title: "End Date"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/Body_run_duration_stats_by_policy_status"}
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema:
                type: "array"
                items: {}
                title: "Response Run Duration Stats By Policy Status"
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
  "/policies/{policy_id}/runs/count/query":
    post:
      tags:
        - "policies"
      summary: "Runs By Policy"
      description: "Get run counts and error rates for a policy."
      operationId: "runs_by_policy"
      parameters:
        - name: "policy_id"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Policy Id"
        - name: "start_date"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
                format: "date"
              - type: "null"
            title: "Start Date"
        - name: "end_date"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
                format: "date"
              - type: "null"
            title: "End Date"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/Body_runs_by_policy"}
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema:
                type: "array"
                items: {}
                title: "Response Runs By Policy"
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
  "/policies/{policy_id}/runs/outcomes/query":
    post:
      tags:
        - "policies"
      summary: "Runs Outcomes By Policy"
      description: "Get run outcome distribution for a policy."
      operationId: "runs_outcomes_by_policy"
      parameters:
        - name: "policy_id"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Policy Id"
        - name: "start_date"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
                format: "date"
              - type: "null"
            title: "Start Date"
        - name: "end_date"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
                format: "date"
              - type: "null"
            title: "End Date"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/Body_runs_outcomes_by_policy"}
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema:
                type: "array"
                items: {}
                title: "Response Runs Outcomes By Policy"
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
  "/policy-versions/":
    post:
      tags:
        - "policy-versions"
      summary: "Create Policy Version"
      description: "Create a new policy version."
      operationId: "create_policy_version"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/PolicyVersionBase"}
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PolicyVersion"}
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-group: "policyVersions"
      x-speakeasy-name-override: "create"
    get:
      tags:
        - "policy-versions"
      summary: "List Policy Versions"
      description: "List policy versions with optional filtering."
      operationId: "list_policy_versions"
      parameters:
        - name: "policy_id"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "Policy Id"
        - name: "include_archived"
          in: "query"
          required: false
          schema:
            type: "boolean"
            default: false
            title: "Include Archived"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema:
                type: "array"
                items: {"$ref": "#/components/schemas/PolicyVersion"}
                title: "Response List Policy Versions"
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-name-override: "list"
  "/policy-versions/{policy_version_id}":
    get:
      tags:
        - "policy-versions"
      summary: "Get Policy Version"
      description: "Get a policy version by ID."
      operationId: "get_policy_version"
      parameters:
        - name: "policy_version_id"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Policy Version Id"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PolicyVersion"}
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-name-override: "get"
    put:
      tags:
        - "policy-versions"
      summary: "Update Policy Version"
      description: "Update a policy version."
      operationId: "update_policy_version"
      parameters:
        - name: "policy_version_id"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Policy Version Id"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/PolicyVersionUpdate"}
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PolicyVersion"}
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-group: "policyVersions"
      x-speakeasy-name-override: "update"
    delete:
      tags:
        - "policy-versions"
      summary: "Delete Policy Version"
      description: "Delete (archive) a policy version."
      operationId: "delete_policy_version"
      parameters:
        - name: "policy_version_id"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Policy Version Id"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {}
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-group: "policyVersions"
      x-speakeasy-name-override: "delete"
  "/policy-versions/{policy_version_id}/runs":
    post:
      tags:
        - "policy-versions"
      summary: "Create Run By Policy Version"
      description: "Create a run for a policy version."
      operationId: "create_run_by_policy_version"
      parameters:
        - name: "policy_version_id"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Policy Version Id"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/Body_create_run_by_policy_version"}
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RunCreated"}
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-group: "policyVersions"
      x-speakeasy-name-override: "createRun"
    get:
      tags:
        - "policy-versions"
      summary: "List Runs By Policy Version"
      description: "List runs for a policy version."
      operationId: "list_runs_by_policy_version"
      parameters:
        - name: "policy_version_id"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Policy Version Id"
        - name: "start_date"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
                format: "date"
              - type: "null"
            title: "Start Date"
        - name: "end_date"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
                format: "date"
              - type: "null"
            title: "End Date"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema:
                type: "array"
                items: {"$ref": "#/components/schemas/Run"}
                title: "Response List Runs By Policy Version"
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-name-override: "listRuns"
  "/policy-versions/{policy_version_id}/run":
    post:
      tags:
        - "policy-versions"
      summary: "Run Workflow"
      description: "Execute a workflow and wait for results."
      operationId: "run_workflow"
      parameters:
        - name: "policy_version_id"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Policy Version Id"
        - name: "polling_interval_ms"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 500
            title: "Polling Interval Ms"
        - name: "polling_timeout_ms"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 300000
            title: "Polling Timeout Ms"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/Body_run_workflow"}
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RunResult"}
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-name-override: "runWorkflow"
  "/policy-versions/{policy_version_id}/variables":
    get:
      tags:
        - "policy-versions"
      summary: "List Config Variables"
      description: "List configuration variables for a policy version."
      operationId: "list_config_variables"
      parameters:
        - name: "policy_version_id"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Policy Version Id"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema:
                type: "array"
                items: {"$ref": "#/components/schemas/ConfigurationVariables"}
                title: "Response List Config Variables"
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-group: "policyVersions"
      x-speakeasy-name-override: "listConfigVariables"
    put:
      tags:
        - "policy-versions"
      summary: "Set Config Variables"
      description: "Set configuration variables for a policy version."
      operationId: "set_config_variables"
      parameters:
        - name: "policy_version_id"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Policy Version Id"
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: "array"
              items: {"$ref": "#/components/schemas/ConfigurationVariablesBase"}
              title: "Desired Variables"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {}
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-group: "policyVersions"
      x-speakeasy-name-override: "setConfigVariables"
  "/policy-versions/{policy_version_id}/data-sources":
    get:
      tags:
        - "policy-versions"
      summary: "List Data Sources By Policy Version"
      description: "List data sources used by a policy version."
      operationId: "list_data_sources_by_policy_version"
      parameters:
        - name: "policy_version_id"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Policy Version Id"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema:
                type: "array"
                items: {"$ref": "#/components/schemas/DataSourceReference"}
                title: "Response List Data Sources By Policy Version"
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-group: "policyVersions"
      x-speakeasy-name-override: "listDataSources"
  "/runs/{run_id}/data":
    get:
      tags:
        - "runs"
      summary: "Get Run Data"
      description: "Get run data including step outputs and metadata."
      operationId: "get_run_data"
      parameters:
        - name: "run_id"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Run Id"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RunData"}
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-name-override: "getData"
  "/runs/{run_id}/logs":
    get:
      tags:
        - "runs"
      summary: "Get Run Logs"
      description: "Get logs for a run."
      operationId: "get_run_logs"
      parameters:
        - name: "run_id"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Run Id"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RunLogs"}
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-name-override: "getLogs"
  "/runs/{run_id}":
    get:
      tags:
        - "runs"
      summary: "Get Run"
      description: "Get run details."
      operationId: "get_run"
      parameters:
        - name: "run_id"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Run Id"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/Run"}
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-name-override: "get"
  "/auth/{service_name}/start":
    get:
      tags:
        - "auth"
      summary: "Start Auth"
      description: "Initiates the OAuth2 flow for a given service."
      operationId: "start_auth"
      parameters:
        - name: "service_name"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Service Name"
        - name: "project_id"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "Project Id"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/AuthStartResponse"}
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-name-override: "start"
  "/auth/{service_name}/user_info":
    get:
      tags:
        - "auth"
      summary: "Get User Info"
      operationId: "get_user_info"
      parameters:
        - name: "service_name"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Service Name"
        - name: "project_id"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "Project Id"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/AuthUserInfoResponse"}
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-name-override: "getUserInfo"
  "/auth/{service_name}/disconnect":
    post:
      tags:
        - "auth"
      summary: "Disconnect"
      operationId: "disconnect"
      parameters:
        - name: "service_name"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Service Name"
        - name: "project_id"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "Project Id"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/AuthDisconnectResponse"}
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
  "/auth/{service_name}/callback":
    get:
      tags:
        - "auth"
      summary: "Auth Callback"
      description: "Handles the callback from the OAuth provider."
      operationId: "auth_callback"
      parameters:
        - name: "service_name"
          in: "path"
          required: true
          schema:
            type: "string"
            title: "Service Name"
        - name: "code"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "Code"
        - name: "state"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "State"
        - name: "error"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "Error"
        - name: "project_id"
          in: "query"
          required: false
          schema:
            anyOf:
              - type: "string"
              - type: "null"
            title: "Project Id"
      responses:
        "200":
          description: "Successful Response"
          content:
            "application/json":
              schema: {}
        "404":
          description: "Not found"
        "422":
          description: "Validation Error"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HTTPValidationError"}
      x-speakeasy-name-override: "callback"
components:
  schemas:
    "AuthDisconnectResponse":
      properties:
        "message":
          type: "string"
          title: "Message"
      type: "object"
      required:
        - "message"
      title: "AuthDisconnectResponse"
    "AuthStartResponse":
      properties:
        "authorization_url":
          type: "string"
          title: "Authorization Url"
      type: "object"
      required:
        - "authorization_url"
      title: "AuthStartResponse"
    "AuthUserInfoResponse":
      properties:
        "email":
          type: "string"
          title: "Email"
        "picture":
          type: "string"
          title: "Picture"
      type: "object"
      required:
        - "email"
        - "picture"
      title: "AuthUserInfoResponse"
    "Body_create_run_by_policy_version":
      properties:
        "input_data":
          additionalProperties: true
          type: "object"
          title: "Input Data"
        "config_variables":
          additionalProperties: true
          type: "object"
          title: "Config Variables"
      type: "object"
      required:
        - "input_data"
      title: "Body_create_run_by_policy_version"
    "Body_create_run_group":
      properties:
        "input_data":
          additionalProperties: true
          type: "object"
          title: "Input Data"
        "config_variables":
          additionalProperties: true
          type: "object"
          title: "Config Variables"
      type: "object"
      required:
        - "input_data"
      title: "Body_create_run_group"
    "Body_run_duration_stats_by_policy":
      properties:
        "versions":
          anyOf:
            - items:
                type: "string"
              type: "array"
            - type: "null"
          title: "Versions"
      type: "object"
      title: "Body_run_duration_stats_by_policy"
    "Body_run_duration_stats_by_policy_status":
      properties:
        "versions":
          anyOf:
            - items:
                type: "string"
              type: "array"
            - type: "null"
          title: "Versions"
      type: "object"
      title: "Body_run_duration_stats_by_policy_status"
    "Body_run_version_sync":
      properties:
        "policy_version_id":
          type: "string"
          format: "uuid"
          title: "Policy Version Id"
        "input_data":
          additionalProperties: true
          type: "object"
          title: "Input Data"
        "config_variables":
          additionalProperties: true
          type: "object"
          title: "Config Variables"
      type: "object"
      required:
        - "policy_version_id"
        - "input_data"
      title: "Body_run_version_sync"
    "Body_run_workflow":
      properties:
        "input_data":
          additionalProperties: true
          type: "object"
          title: "Input Data"
        "config_variables":
          additionalProperties: true
          type: "object"
          title: "Config Variables"
      type: "object"
      required:
        - "input_data"
      title: "Body_run_workflow"
    "Body_runs_by_policy":
      properties:
        "versions":
          anyOf:
            - items:
                type: "string"
              type: "array"
            - type: "null"
          title: "Versions"
      type: "object"
      title: "Body_runs_by_policy"
    "Body_runs_outcomes_by_policy":
      properties:
        "versions":
          anyOf:
            - items:
                type: "string"
              type: "array"
            - type: "null"
          title: "Versions"
      type: "object"
      title: "Body_runs_outcomes_by_policy"
    "Body_update_run":
      properties:
        "status":
          type: "string"
          title: "Status"
        "result":
          type: "string"
          title: "Result"
        "metadata":
          anyOf:
            - additionalProperties: true
              type: "object"
            - type: "null"
          title: "Metadata"
      type: "object"
      required:
        - "status"
        - "result"
      title: "Body_update_run"
    "CachingOptions":
      properties:
        "enabled":
          type: "boolean"
          title: "Enabled"
          default: false
        "ttl":
          anyOf:
            - {"$ref": "#/components/schemas/CachingTTL"}
            - type: "integer"
            - type: "null"
          title: "Ttl"
      type: "object"
      title: "CachingOptions"
    "CachingTTL":
      properties:
        "days":
          type: "integer"
          title: "Days"
          default: 0
        "hours":
          type: "integer"
          title: "Hours"
          default: 0
        "minutes":
          type: "integer"
          title: "Minutes"
          default: 0
        "seconds":
          type: "integer"
          title: "Seconds"
          default: 0
      type: "object"
      title: "CachingTTL"
    "Component":
      properties:
        "name":
          type: "string"
          title: "Name"
        "description":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Description"
        "icon":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Icon"
        "component_id":
          type: "string"
          format: "uuid"
          title: "Component Id"
        "archived":
          type: "boolean"
          title: "Archived"
        "created_at":
          type: "string"
          format: "date-time"
          title: "Created At"
        "last_updated_at":
          type: "string"
          format: "date-time"
          title: "Last Updated At"
        "workflow":
          anyOf:
            - {"$ref": "#/components/schemas/Workflow"}
            - type: "null"
      type: "object"
      required:
        - "name"
        - "component_id"
        - "archived"
        - "created_at"
        - "last_updated_at"
      title: "Component"
    "ComponentBase":
      properties:
        "name":
          type: "string"
          title: "Name"
        "description":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Description"
        "icon":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Icon"
      type: "object"
      required:
        - "name"
      title: "ComponentBase"
    "ComponentUpdate":
      properties:
        "name":
          type: "string"
          title: "Name"
        "description":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Description"
        "icon":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Icon"
        "workflow":
          anyOf:
            - {"$ref": "#/components/schemas/WorkflowBase"}
            - type: "null"
      type: "object"
      required:
        - "name"
      title: "ComponentUpdate"
    "ConfigurationVariables":
      properties:
        "name":
          type: "string"
          title: "Name"
        "value":
          anyOf:
            - type: "string"
            - type: "number"
            - type: "integer"
            - type: "boolean"
            - type: "null"
          title: "Value"
        "created_at":
          anyOf:
            - type: "string"
              format: "date-time"
            - type: "null"
          title: "Created At"
        "last_updated_at":
          anyOf:
            - type: "string"
              format: "date-time"
            - type: "null"
          title: "Last Updated At"
      type: "object"
      required:
        - "name"
      title: "ConfigurationVariables"
    "ConfigurationVariablesBase":
      properties:
        "name":
          type: "string"
          title: "Name"
        "value":
          anyOf:
            - type: "string"
            - type: "number"
            - type: "integer"
            - type: "boolean"
            - type: "null"
          title: "Value"
      type: "object"
      required:
        - "name"
      title: "ConfigurationVariablesBase"
    "DagsterLogDetails":
      properties:
        "log_type":
          type: "string"
          title: "Log Type"
        "message":
          type: "string"
          title: "Message"
      type: "object"
      required:
        - "log_type"
        - "message"
      title: "DagsterLogDetails"
    "DataBrokerRequest":
      properties:
        "data_source_name":
          type: "string"
          title: "Data Source Name"
        "configured_params":
          additionalProperties: true
          type: "object"
          title: "Configured Params"
        "run_id":
          type: "string"
          title: "Run Id"
      type: "object"
      required:
        - "data_source_name"
        - "configured_params"
        - "run_id"
      title: "DataBrokerRequest"
    "DataBrokerResponse":
      properties:
        "data_object_id":
          type: "string"
          format: "uuid"
          title: "Data Object Id"
        "origin": {"$ref": "#/components/schemas/DataObjectOrigin"}
        "key":
          type: "string"
          title: "Key"
        "value":
          title: "Value"
        "start_time":
          anyOf:
            - type: "number"
            - type: "null"
          title: "Start Time"
        "end_time":
          anyOf:
            - type: "number"
            - type: "null"
          title: "End Time"
        "error":
          anyOf:
            - additionalProperties: true
              type: "object"
            - type: "string"
            - type: "null"
          title: "Error"
      type: "object"
      required:
        - "data_object_id"
        - "origin"
        - "key"
        - "value"
      title: "DataBrokerResponse"
    "DataObject":
      properties:
        "data_object_id":
          type: "string"
          format: "uuid"
          title: "Data Object Id"
        "data_source_id":
          type: "string"
          format: "uuid"
          title: "Data Source Id"
        "key":
          type: "string"
          title: "Key"
        "created_at":
          type: "string"
          format: "date-time"
          title: "Created At"
        "value":
          title: "Value"
      type: "object"
      required:
        - "data_object_id"
        - "data_source_id"
        - "key"
        - "created_at"
        - "value"
      title: "DataObject"
    "DataObjectMetadata":
      properties:
        "data_object_id":
          type: "string"
          format: "uuid"
          title: "Data Object Id"
        "data_source_id":
          type: "string"
          format: "uuid"
          title: "Data Source Id"
        "key":
          type: "string"
          title: "Key"
        "created_at":
          type: "string"
          format: "date-time"
          title: "Created At"
      type: "object"
      required:
        - "data_object_id"
        - "data_source_id"
        - "key"
        - "created_at"
      title: "DataObjectMetadata"
    "DataObjectOrigin":
      type: "string"
      enum:
        - "REQUEST"
        - "CACHE"
      title: "DataObjectOrigin"
    "DataSource":
      properties:
        "name":
          type: "string"
          title: "Name"
        "source":
          anyOf:
            - {"$ref": "#/components/schemas/HTTPSource"}
            - {"$ref": "#/components/schemas/LocalFileSource"}
            - {"$ref": "#/components/schemas/RegisteredFileSource"}
          title: "Source"
        "caching": {"$ref": "#/components/schemas/CachingOptions", "default": {"enabled": false}}
        "description":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Description"
        "metadata":
          anyOf:
            - additionalProperties: true
              type: "object"
            - type: "null"
          title: "Metadata"
        "data_source_id":
          type: "string"
          format: "uuid"
          title: "Data Source Id"
        "created_at":
          type: "string"
          format: "date-time"
          title: "Created At"
        "last_updated_at":
          type: "string"
          format: "date-time"
          title: "Last Updated At"
        "variables":
          anyOf:
            - items:
                type: "string"
              type: "array"
            - type: "null"
          title: "Variables"
        "runtime_params":
          anyOf:
            - items:
                type: "string"
              type: "array"
            - type: "null"
          title: "Runtime Params"
        "status": {"$ref": "#/components/schemas/DataSourceStatus", "default": "DRAFT"}
      type: "object"
      required:
        - "name"
        - "source"
        - "data_source_id"
        - "created_at"
        - "last_updated_at"
      title: "DataSource"
    "DataSourceEnvVar":
      properties:
        "name":
          type: "string"
          title: "Name"
        "value":
          anyOf:
            - type: "string"
            - type: "number"
            - type: "integer"
            - type: "boolean"
            - type: "null"
          title: "Value"
        "created_at":
          anyOf:
            - type: "string"
              format: "date-time"
            - type: "null"
          title: "Created At"
        "last_updated_at":
          anyOf:
            - type: "string"
              format: "date-time"
            - type: "null"
          title: "Last Updated At"
      type: "object"
      required:
        - "name"
      title: "DataSourceEnvVar"
    "DataSourceEnvVarBase":
      properties:
        "name":
          type: "string"
          title: "Name"
        "value":
          anyOf:
            - type: "string"
            - type: "number"
            - type: "integer"
            - type: "boolean"
            - type: "null"
          title: "Value"
      type: "object"
      required:
        - "name"
      title: "DataSourceEnvVarBase"
    "DataSourceReference":
      properties:
        "data_source_id":
          type: "string"
          format: "uuid"
          title: "Data Source Id"
        "name":
          type: "string"
          title: "Name"
        "created_at":
          type: "string"
          format: "date-time"
          title: "Created At"
      type: "object"
      required:
        - "data_source_id"
        - "name"
        - "created_at"
      title: "DataSourceReference"
    "DataSourceSpec":
      properties:
        "name":
          type: "string"
          title: "Name"
        "source":
          anyOf:
            - {"$ref": "#/components/schemas/HTTPSource"}
            - {"$ref": "#/components/schemas/LocalFileSource"}
            - {"$ref": "#/components/schemas/RegisteredFileSource"}
          title: "Source"
        "caching": {"$ref": "#/components/schemas/CachingOptions", "default": {"enabled": false}}
        "description":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Description"
        "metadata":
          anyOf:
            - additionalProperties: true
              type: "object"
            - type: "null"
          title: "Metadata"
      type: "object"
      required:
        - "name"
        - "source"
      title: "DataSourceSpec"
    "DataSourceStatus":
      type: "string"
      enum:
        - "DRAFT"
        - "PUBLISHED"
        - "ARCHIVED"
      title: "DataSourceStatus"
    "DataSourceTestParams":
      properties:
        "params":
          anyOf:
            - additionalProperties: true
              type: "object"
            - type: "null"
          title: "Params"
        "env_vars":
          anyOf:
            - additionalProperties:
                type: "string"
              type: "object"
            - type: "null"
          title: "Env Vars"
      type: "object"
      title: "DataSourceTestParams"
      description: "Parameters for testing an existing data source.\nData source ID comes from URL path."
    "DataSourceTestRequest":
      properties:
        "url":
          type: "string"
          title: "Url"
        "method":
          type: "string"
          title: "Method"
          default: "GET"
        "headers":
          anyOf:
            - additionalProperties:
                type: "string"
              type: "object"
            - type: "null"
          title: "Headers"
        "body":
          anyOf:
            - additionalProperties: true
              type: "object"
            - type: "string"
            - type: "null"
          title: "Body"
        "params":
          anyOf:
            - additionalProperties: true
              type: "object"
            - type: "null"
          title: "Params"
        "env_vars":
          anyOf:
            - additionalProperties:
                type: "string"
              type: "object"
            - type: "null"
          title: "Env Vars"
      type: "object"
      required:
        - "url"
      title: "DataSourceTestRequest"
      description: "Full test request with all configuration (used for testing without existing data source)."
    "DataSourceTestResponse":
      properties:
        "test_id":
          type: "string"
          format: "uuid"
          title: "Test Id"
        "request_url":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Request Url"
        "request_headers":
          anyOf:
            - additionalProperties:
                type: "string"
              type: "object"
            - type: "null"
          title: "Request Headers"
        "status_code":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Status Code"
        "response_time_ms":
          type: "number"
          title: "Response Time Ms"
        "response_body":
          anyOf:
            - additionalProperties: true
              type: "object"
            - type: "string"
            - type: "null"
          title: "Response Body"
        "response_headers":
          anyOf:
            - additionalProperties:
                type: "string"
              type: "object"
            - type: "null"
          title: "Response Headers"
        "error":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Error"
      type: "object"
      required:
        - "test_id"
        - "status_code"
        - "response_time_ms"
      title: "DataSourceTestResponse"
    "DependencyDict":
      properties:
        "node":
          type: "string"
          title: "Node"
        "output":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Output"
        "key":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Key"
        "hierarchy":
          anyOf:
            - items:
                type: "string"
              type: "array"
            - type: "null"
          title: "Hierarchy"
      type: "object"
      required:
        - "node"
        - "output"
        - "key"
        - "hierarchy"
      title: "DependencyDict"
      description: "Dict representation of a Dependency object."
    "EnvVarConfig":
      properties:
        "env":
          type: "string"
          title: "Env"
      type: "object"
      required:
        - "env"
      title: "EnvVarConfig"
    "HTTPSource":
      properties:
        "url":
          type: "string"
          title: "Url"
        "method":
          type: "string"
          enum:
            - "GET"
            - "POST"
            - "PUT"
            - "DELETE"
          title: "Method"
          default: "GET"
        "headers":
          additionalProperties:
            anyOf:
              - type: "string"
              - type: "integer"
              - type: "number"
              - type: "boolean"
              - items:
                  anyOf:
                    - type: "string"
                    - type: "integer"
                    - type: "number"
                    - type: "boolean"
                type: "array"
              - additionalProperties:
                  anyOf:
                    - type: "string"
                    - type: "integer"
                    - type: "number"
                    - type: "boolean"
                    - items:
                        anyOf:
                          - type: "string"
                          - type: "integer"
                          - type: "number"
                          - type: "boolean"
                      type: "array"
                    - additionalProperties:
                        anyOf:
                          - type: "string"
                          - type: "integer"
                          - type: "number"
                          - type: "boolean"
                          - items:
                              anyOf:
                                - type: "string"
                                - type: "integer"
                                - type: "number"
                                - type: "boolean"
                            type: "array"
                      type: "object"
                type: "object"
              - {"$ref": "#/components/schemas/EnvVarConfig"}
              - {"$ref": "#/components/schemas/RunTimeParam"}
          type: "object"
          title: "Headers"
        "params":
          additionalProperties:
            anyOf:
              - type: "string"
              - type: "integer"
              - type: "number"
              - type: "boolean"
              - items:
                  anyOf:
                    - type: "string"
                    - type: "integer"
                    - type: "number"
                    - type: "boolean"
                type: "array"
              - additionalProperties:
                  anyOf:
                    - type: "string"
                    - type: "integer"
                    - type: "number"
                    - type: "boolean"
                    - items:
                        anyOf:
                          - type: "string"
                          - type: "integer"
                          - type: "number"
                          - type: "boolean"
                      type: "array"
                    - additionalProperties:
                        anyOf:
                          - type: "string"
                          - type: "integer"
                          - type: "number"
                          - type: "boolean"
                          - items:
                              anyOf:
                                - type: "string"
                                - type: "integer"
                                - type: "number"
                                - type: "boolean"
                            type: "array"
                      type: "object"
                type: "object"
              - {"$ref": "#/components/schemas/EnvVarConfig"}
              - {"$ref": "#/components/schemas/RunTimeParam"}
          type: "object"
          title: "Params"
        "body":
          additionalProperties:
            anyOf:
              - type: "string"
              - type: "integer"
              - type: "number"
              - type: "boolean"
              - items:
                  anyOf:
                    - type: "string"
                    - type: "integer"
                    - type: "number"
                    - type: "boolean"
                type: "array"
              - additionalProperties:
                  anyOf:
                    - type: "string"
                    - type: "integer"
                    - type: "number"
                    - type: "boolean"
                    - items:
                        anyOf:
                          - type: "string"
                          - type: "integer"
                          - type: "number"
                          - type: "boolean"
                      type: "array"
                    - additionalProperties:
                        anyOf:
                          - type: "string"
                          - type: "integer"
                          - type: "number"
                          - type: "boolean"
                          - items:
                              anyOf:
                                - type: "string"
                                - type: "integer"
                                - type: "number"
                                - type: "boolean"
                            type: "array"
                      type: "object"
                type: "object"
              - {"$ref": "#/components/schemas/EnvVarConfig"}
              - {"$ref": "#/components/schemas/RunTimeParam"}
          type: "object"
          title: "Body"
        "timeout":
          anyOf:
            - type: "integer"
            - type: "null"
          title: "Timeout"
        "retry": {"$ref": "#/components/schemas/RetryPolicy"}
        "response_type":
          type: "string"
          enum:
            - "JSON"
            - "XML"
            - "CSV"
            - "PLAIN_TEXT"
          title: "Response Type"
          default: "PLAIN_TEXT"
      type: "object"
      required:
        - "url"
      title: "HTTPSource"
    "HTTPValidationError":
      properties:
        "detail":
          items: {"$ref": "#/components/schemas/ValidationError"}
          type: "array"
          title: "Detail"
      type: "object"
      title: "HTTPValidationError"
    "LocalFileSource":
      properties:
        "path":
          type: "string"
          title: "Path"
      type: "object"
      required:
        - "path"
      title: "LocalFileSource"
    "LogEntry":
      properties:
        "timestamp":
          type: "string"
          format: "date-time"
          title: "Timestamp"
        "step_key":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Step Key"
        "source":
          type: "string"
          title: "Source"
        "event":
          anyOf:
            - {"$ref": "#/components/schemas/UserLogDetails"}
            - {"$ref": "#/components/schemas/DagsterLogDetails"}
          title: "Event"
      type: "object"
      required:
        - "timestamp"
        - "step_key"
        - "source"
        - "event"
      title: "LogEntry"
    "NodeDefinitionDict":
      properties:
        "name":
          type: "string"
          title: "Name"
        "node_type":
          type: "string"
          title: "Node Type"
        "dependencies":
          anyOf:
            - additionalProperties: {"$ref": "#/components/schemas/DependencyDict"}
              type: "object"
            - type: "null"
          title: "Dependencies"
        "metadata":
          anyOf:
            - additionalProperties: true
              type: "object"
            - type: "null"
          title: "Metadata"
        "description":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Description"
        "hierarchy":
          anyOf:
            - items:
                type: "string"
              type: "array"
            - type: "null"
          title: "Hierarchy"
      type: "object"
      required:
        - "name"
        - "node_type"
      title: "NodeDefinitionDict"
      description: "Dict representation of a NodeDefinition object."
    "Policy":
      properties:
        "name":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Name"
        "description":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Description"
        "allocation_strategy":
          anyOf:
            - {"$ref": "#/components/schemas/PolicyAllocationStrategy"}
            - type: "null"
        "policy_id":
          type: "string"
          format: "uuid"
          title: "Policy Id"
        "archived":
          type: "boolean"
          title: "Archived"
        "created_at":
          type: "string"
          format: "date-time"
          title: "Created At"
        "last_updated_at":
          type: "string"
          format: "date-time"
          title: "Last Updated At"
      type: "object"
      required:
        - "policy_id"
        - "archived"
        - "created_at"
        - "last_updated_at"
      title: "Policy"
    "PolicyAllocationStrategy":
      properties:
        "choice":
          items: {"$ref": "#/components/schemas/PolicyRunPartition"}
          type: "array"
          title: "Choice"
        "shadow":
          anyOf:
            - items:
                type: "string"
              type: "array"
            - type: "null"
          title: "Shadow"
      type: "object"
      required:
        - "choice"
      title: "PolicyAllocationStrategy"
    "PolicyBase":
      properties:
        "name":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Name"
        "description":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Description"
        "allocation_strategy":
          anyOf:
            - {"$ref": "#/components/schemas/PolicyAllocationStrategy"}
            - type: "null"
      type: "object"
      title: "PolicyBase"
    "PolicyCreate":
      properties:
        "name":
          type: "string"
          title: "Name"
        "description":
          type: "string"
          title: "Description"
          default: ""
      type: "object"
      required:
        - "name"
      title: "PolicyCreate"
    "PolicyDefinitionDict":
      properties:
        "nodes":
          items: {"$ref": "#/components/schemas/NodeDefinitionDict"}
          type: "array"
          title: "Nodes"
        "input_schema":
          additionalProperties:
            type: "string"
          type: "object"
          title: "Input Schema"
        "config_variables":
          anyOf:
            - items:
                type: "string"
              type: "array"
            - type: "null"
          title: "Config Variables"
        "output_callback":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Output Callback"
      type: "object"
      required:
        - "nodes"
        - "input_schema"
      title: "PolicyDefinitionDict"
      description: "Dict representation of a PolicyDefinition object."
    "PolicyRunPartition":
      properties:
        "policy_version_id":
          type: "string"
          title: "Policy Version Id"
        "frequency":
          type: "integer"
          maximum: 1000
          exclusiveMinimum: 0
          title: "Frequency"
      type: "object"
      required:
        - "policy_version_id"
        - "frequency"
      title: "PolicyRunPartition"
    "PolicyVersion":
      properties:
        "policy_id":
          type: "string"
          format: "uuid"
          title: "Policy Id"
        "alias":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Alias"
        "policy_version_id":
          type: "string"
          format: "uuid"
          title: "Policy Version Id"
        "archived":
          type: "boolean"
          title: "Archived"
        "created_at":
          type: "string"
          format: "date-time"
          title: "Created At"
        "last_updated_at":
          type: "string"
          format: "date-time"
          title: "Last Updated At"
        "workflow":
          anyOf:
            - {"$ref": "#/components/schemas/Workflow"}
            - type: "null"
      type: "object"
      required:
        - "policy_id"
        - "alias"
        - "policy_version_id"
        - "archived"
        - "created_at"
        - "last_updated_at"
      title: "PolicyVersion"
    "PolicyVersionBase":
      properties:
        "policy_id":
          type: "string"
          format: "uuid"
          title: "Policy Id"
        "alias":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Alias"
      type: "object"
      required:
        - "policy_id"
        - "alias"
      title: "PolicyVersionBase"
    "PolicyVersionUpdate":
      properties:
        "alias":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Alias"
        "workflow": {"$ref": "#/components/schemas/WorkflowBase"}
      type: "object"
      required:
        - "alias"
        - "workflow"
      title: "PolicyVersionUpdate"
    "RegisteredFileSource":
      properties:
        "file_id":
          type: "string"
          title: "File Id"
        "path":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Path"
      type: "object"
      required:
        - "file_id"
      title: "RegisteredFileSource"
    "RetryPolicy":
      properties:
        "max_retries":
          type: "integer"
          title: "Max Retries"
        "backoff_factor":
          anyOf:
            - type: "number"
            - type: "null"
          title: "Backoff Factor"
        "status_forcelist":
          anyOf:
            - items:
                type: "integer"
              type: "array"
            - type: "null"
          title: "Status Forcelist"
      type: "object"
      required:
        - "max_retries"
      title: "RetryPolicy"
    "Run":
      properties:
        "run_id":
          type: "string"
          format: "uuid"
          title: "Run Id"
        "run_group_id":
          anyOf:
            - type: "string"
              format: "uuid"
            - type: "null"
          title: "Run Group Id"
        "policy_version_id":
          type: "string"
          format: "uuid"
          title: "Policy Version Id"
        "status": {"$ref": "#/components/schemas/RunStatus"}
        "result":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Result"
        "input_data":
          anyOf:
            - additionalProperties: true
              type: "object"
            - type: "null"
          title: "Input Data"
        "run_metadata":
          anyOf:
            - additionalProperties: true
              type: "object"
            - type: "null"
          title: "Run Metadata"
        "created_at":
          type: "string"
          format: "date-time"
          title: "Created At"
        "started_at":
          anyOf:
            - type: "string"
              format: "date-time"
            - type: "null"
          title: "Started At"
        "last_updated_at":
          type: "string"
          format: "date-time"
          title: "Last Updated At"
      type: "object"
      required:
        - "run_id"
        - "policy_version_id"
        - "status"
        - "created_at"
        - "last_updated_at"
      title: "Run"
    "RunCreated":
      properties:
        "policy_version_id":
          type: "string"
          format: "uuid"
          title: "Policy Version Id"
        "run_id":
          type: "string"
          format: "uuid"
          title: "Run Id"
      type: "object"
      required:
        - "policy_version_id"
        - "run_id"
      title: "RunCreated"
    "RunData":
      properties:
        "run_id":
          type: "string"
          format: "uuid"
          title: "Run Id"
        "run_group_id":
          anyOf:
            - type: "string"
              format: "uuid"
            - type: "null"
          title: "Run Group Id"
        "policy_version_id":
          type: "string"
          format: "uuid"
          title: "Policy Version Id"
        "status": {"$ref": "#/components/schemas/RunStatus"}
        "result":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Result"
        "input_data":
          anyOf:
            - additionalProperties: true
              type: "object"
            - type: "null"
          title: "Input Data"
        "run_metadata":
          anyOf:
            - additionalProperties: true
              type: "object"
            - type: "null"
          title: "Run Metadata"
        "created_at":
          type: "string"
          format: "date-time"
          title: "Created At"
        "started_at":
          anyOf:
            - type: "string"
              format: "date-time"
            - type: "null"
          title: "Started At"
        "last_updated_at":
          type: "string"
          format: "date-time"
          title: "Last Updated At"
        "steps":
          additionalProperties: {"$ref": "#/components/schemas/StepDetails"}
          type: "object"
          title: "Steps"
      type: "object"
      required:
        - "run_id"
        - "policy_version_id"
        - "status"
        - "created_at"
        - "last_updated_at"
      title: "RunData"
    "RunGroupResult":
      properties:
        "policy_id":
          type: "string"
          format: "uuid"
          title: "Policy Id"
        "run_group_id":
          type: "string"
          format: "uuid"
          title: "Run Group Id"
        "runs": {"$ref": "#/components/schemas/RunGroupRuns"}
      type: "object"
      required:
        - "policy_id"
        - "run_group_id"
        - "runs"
      title: "RunGroupResult"
    "RunGroupRuns":
      properties:
        "main":
          type: "string"
          format: "uuid"
          title: "Main"
        "shadow":
          anyOf:
            - items:
                type: "string"
                format: "uuid"
              type: "array"
            - type: "null"
          title: "Shadow"
      type: "object"
      required:
        - "main"
      title: "RunGroupRuns"
    "RunLogs":
      properties:
        "run_id":
          type: "string"
          format: "uuid"
          title: "Run Id"
        "status":
          type: "string"
          title: "Status"
        "last_updated_at":
          type: "string"
          format: "date-time"
          title: "Last Updated At"
        "logs":
          items: {"$ref": "#/components/schemas/LogEntry"}
          type: "array"
          title: "Logs"
      type: "object"
      required:
        - "run_id"
        - "status"
        - "last_updated_at"
        - "logs"
      title: "RunLogs"
    "RunResult":
      properties:
        "run_id":
          type: "string"
          format: "uuid"
          title: "Run Id"
        "status": {"$ref": "#/components/schemas/RunStatus"}
        "result":
          anyOf:
            - type: "string"
            - type: "null"
          title: "Result"
        "run_metadata":
          anyOf:
            - additionalProperties: true
              type: "object"
            - type: "null"
          title: "Run Metadata"
      type: "object"
      required:
        - "run_id"
        - "status"
      title: "RunResult"
    "RunStatus":
      type: "string"
      enum:
        - "PENDING"
        - "STARTED"
        - "SUCCESS"
        - "FAILURE"
      title: "RunStatus"
    "RunTimeParam":
      properties:
        "param":
          type: "string"
          title: "Param"
        "value_type":
          type: "string"
          enum:
            - "str"
            - "int"
            - "float"
            - "auto"
          title: "Value Type"
          default: "auto"
      type: "object"
      required:
        - "param"
      title: "RunTimeParam"
    "StepDetails":
      properties:
        "output":
          anyOf:
            - type: "string"
              format: "binary"
            - type: "string"
            - additionalProperties: true
              type: "object"
            - items: {}
              type: "array"
            - type: "integer"
            - type: "number"
            - type: "null"
          title: "Output"
        "metadata":
          anyOf:
            - {"$ref": "#/components/schemas/StepMetadataBase"}
            - type: "null"
      type: "object"
      required:
        - "output"
        - "metadata"
      title: "StepDetails"
    "StepMetadataBase":
      properties:
        "step_name":
          type: "string"
          title: "Step Name"
        "node_type":
          type: "string"
          title: "Node Type"
        "start_time":
          type: "number"
          title: "Start Time"
        "end_time":
          type: "number"
          title: "End Time"
        "error":
          anyOf:
            - type: "string"
            - items:
                type: "string"
              type: "array"
            - type: "null"
          title: "Error"
        "extra":
          anyOf:
            - additionalProperties: true
              type: "object"
            - type: "null"
          title: "Extra"
      type: "object"
      required:
        - "step_name"
        - "node_type"
        - "start_time"
        - "end_time"
      title: "StepMetadataBase"
    "UIMetadata":
      properties:
        "position": {"$ref": "#/components/schemas/UINodePosition"}
        "width":
          type: "number"
          title: "Width"
        "height":
          type: "number"
          title: "Height"
      type: "object"
      required:
        - "position"
        - "width"
        - "height"
      title: "UIMetadata"
    "UINodePosition":
      properties:
        "x":
          type: "number"
          title: "X"
        "y":
          type: "number"
          title: "Y"
      type: "object"
      required:
        - "x"
        - "y"
      title: "UINodePosition"
    "UserLogDetails":
      properties:
        "log_type":
          type: "string"
          title: "Log Type"
          default: "LOG"
        "message":
          type: "string"
          title: "Message"
        "level":
          type: "string"
          title: "Level"
      type: "object"
      required:
        - "message"
        - "level"
      title: "UserLogDetails"
    "ValidationError":
      properties:
        "loc":
          items:
            anyOf:
              - type: "string"
              - type: "integer"
          type: "array"
          title: "Location"
        "msg":
          type: "string"
          title: "Message"
        "type":
          type: "string"
          title: "Error Type"
      type: "object"
      required:
        - "loc"
        - "msg"
        - "type"
      title: "ValidationError"
    "Workflow":
      properties:
        "spec": {"$ref": "#/components/schemas/PolicyDefinitionDict"}
        "requirements":
          items:
            type: "string"
          type: "array"
          title: "Requirements"
        "variables":
          anyOf:
            - items:
                type: "string"
              type: "array"
            - type: "null"
          title: "Variables"
        "ui_metadata":
          anyOf:
            - additionalProperties: {"$ref": "#/components/schemas/UIMetadata"}
              type: "object"
            - type: "null"
          title: "Ui Metadata"
        "workflow_id":
          type: "string"
          format: "uuid"
          title: "Workflow Id"
        "status": {"$ref": "#/components/schemas/WorkflowStatus"}
      type: "object"
      required:
        - "spec"
        - "requirements"
        - "workflow_id"
        - "status"
      title: "Workflow"
    "WorkflowBase":
      properties:
        "spec": {"$ref": "#/components/schemas/PolicyDefinitionDict"}
        "requirements":
          items:
            type: "string"
          type: "array"
          title: "Requirements"
        "variables":
          anyOf:
            - items:
                type: "string"
              type: "array"
            - type: "null"
          title: "Variables"
        "ui_metadata":
          anyOf:
            - additionalProperties: {"$ref": "#/components/schemas/UIMetadata"}
              type: "object"
            - type: "null"
          title: "Ui Metadata"
      type: "object"
      required:
        - "spec"
        - "requirements"
      title: "WorkflowBase"
    "WorkflowStatus":
      type: "string"
      enum:
        - "VALID"
        - "INVALID"
      title: "WorkflowStatus"
