"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations

from datetime import datetime

from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict

from lineart_sdk.types import (
    UNSET,
    UNSET_SENTINEL,
    BaseModel,
    Nullable,
    OptionalNullable,
)

from .workflow import Workflow, WorkflowTypedDict


class PolicyVersionTypedDict(TypedDict):
    policy_id: str
    alias: Nullable[str]
    policy_version_id: str
    archived: bool
    created_at: datetime
    last_updated_at: datetime
    workflow: NotRequired[Nullable[WorkflowTypedDict]]


class PolicyVersion(BaseModel):
    policy_id: str

    alias: Nullable[str]

    policy_version_id: str

    archived: bool

    created_at: datetime

    last_updated_at: datetime

    workflow: OptionalNullable[Workflow] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["workflow"]
        nullable_fields = ["alias", "workflow"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
