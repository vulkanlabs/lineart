"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations

from datetime import datetime
from typing import Any, Dict, List, Optional, Union

from pydantic import model_serializer
from typing_extensions import NotRequired, TypeAliasType, TypedDict

from lineart_sdk.types import (
    UNSET,
    UNSET_SENTINEL,
    BaseModel,
    Nullable,
    OptionalNullable,
)

from .cachingoptions import CachingOptions, CachingOptionsTypedDict
from .httpsource import HTTPSource, HTTPSourceTypedDict
from .localfilesource import LocalFileSource, LocalFileSourceTypedDict
from .registeredfilesource import RegisteredFileSource, RegisteredFileSourceTypedDict

DataSourceSourceTypedDict = TypeAliasType(
    "DataSourceSourceTypedDict",
    Union[LocalFileSourceTypedDict, RegisteredFileSourceTypedDict, HTTPSourceTypedDict],
)


DataSourceSource = TypeAliasType(
    "DataSourceSource", Union[LocalFileSource, RegisteredFileSource, HTTPSource]
)


class DataSourceTypedDict(TypedDict):
    name: str
    source: DataSourceSourceTypedDict
    data_source_id: str
    archived: bool
    created_at: datetime
    last_updated_at: datetime
    caching: NotRequired[CachingOptionsTypedDict]
    description: NotRequired[Nullable[str]]
    metadata: NotRequired[Nullable[Dict[str, Any]]]
    variables: NotRequired[Nullable[List[str]]]
    runtime_params: NotRequired[Nullable[List[str]]]


class DataSource(BaseModel):
    name: str

    source: DataSourceSource

    data_source_id: str

    archived: bool

    created_at: datetime

    last_updated_at: datetime

    caching: Optional[CachingOptions] = None

    description: OptionalNullable[str] = UNSET

    metadata: OptionalNullable[Dict[str, Any]] = UNSET

    variables: OptionalNullable[List[str]] = UNSET

    runtime_params: OptionalNullable[List[str]] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "caching",
            "description",
            "metadata",
            "variables",
            "runtime_params",
        ]
        nullable_fields = ["description", "metadata", "variables", "runtime_params"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
