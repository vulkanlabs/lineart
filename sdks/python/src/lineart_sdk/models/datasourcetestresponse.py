"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations

from typing import Any, Dict, Union

from pydantic import model_serializer
from typing_extensions import NotRequired, TypeAliasType, TypedDict

from lineart_sdk.types import (
    UNSET,
    UNSET_SENTINEL,
    BaseModel,
    Nullable,
    OptionalNullable,
)

ResponseBodyTypedDict = TypeAliasType(
    "ResponseBodyTypedDict", Union[Dict[str, Any], str]
)


ResponseBody = TypeAliasType("ResponseBody", Union[Dict[str, Any], str])


class DataSourceTestResponseTypedDict(TypedDict):
    test_id: str
    status_code: Nullable[int]
    response_time_ms: float
    request_url: NotRequired[Nullable[str]]
    request_headers: NotRequired[Nullable[Dict[str, str]]]
    response_body: NotRequired[Nullable[ResponseBodyTypedDict]]
    response_headers: NotRequired[Nullable[Dict[str, str]]]
    error: NotRequired[Nullable[str]]


class DataSourceTestResponse(BaseModel):
    test_id: str

    status_code: Nullable[int]

    response_time_ms: float

    request_url: OptionalNullable[str] = UNSET

    request_headers: OptionalNullable[Dict[str, str]] = UNSET

    response_body: OptionalNullable[ResponseBody] = UNSET

    response_headers: OptionalNullable[Dict[str, str]] = UNSET

    error: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "request_url",
            "request_headers",
            "response_body",
            "response_headers",
            "error",
        ]
        nullable_fields = [
            "request_url",
            "request_headers",
            "status_code",
            "response_body",
            "response_headers",
            "error",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
