"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations

from datetime import date
from typing import Optional

from pydantic import model_serializer
from typing_extensions import Annotated, NotRequired, TypedDict

from lineart_sdk.types import (
    UNSET,
    UNSET_SENTINEL,
    BaseModel,
    Nullable,
    OptionalNullable,
)
from lineart_sdk.utils import (
    FieldMetadata,
    PathParamMetadata,
    QueryParamMetadata,
    RequestMetadata,
)

from .body_run_duration_stats_by_policy import (
    BodyRunDurationStatsByPolicy,
    BodyRunDurationStatsByPolicyTypedDict,
)


class RunDurationStatsByPolicyRequestTypedDict(TypedDict):
    policy_id: str
    start_date: NotRequired[Nullable[date]]
    end_date: NotRequired[Nullable[date]]
    body_run_duration_stats_by_policy: NotRequired[
        BodyRunDurationStatsByPolicyTypedDict
    ]


class RunDurationStatsByPolicyRequest(BaseModel):
    policy_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]

    start_date: Annotated[
        OptionalNullable[date],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    end_date: Annotated[
        OptionalNullable[date],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    body_run_duration_stats_by_policy: Annotated[
        Optional[BodyRunDurationStatsByPolicy],
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "start_date",
            "end_date",
            "Body_run_duration_stats_by_policy",
        ]
        nullable_fields = ["start_date", "end_date"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
