"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Optional, Union

from pydantic import model_serializer
from typing_extensions import NotRequired, TypeAliasType, TypedDict

from lineart_sdk.types import (
    UNSET,
    UNSET_SENTINEL,
    BaseModel,
    Nullable,
    OptionalNullable,
)

from .envvarconfig import EnvVarConfig, EnvVarConfigTypedDict
from .retrypolicy import RetryPolicy, RetryPolicyTypedDict
from .runtimeparam import RunTimeParam, RunTimeParamTypedDict


class Method(str, Enum):
    GET = "GET"
    POST = "POST"
    PUT = "PUT"
    DELETE = "DELETE"


Headers3TypedDict = TypeAliasType("Headers3TypedDict", Union[str, int, float, bool])


Headers3 = TypeAliasType("Headers3", Union[str, int, float, bool])


Headers4TypedDict = TypeAliasType(
    "Headers4TypedDict", Union[str, int, float, bool, List[Headers3TypedDict]]
)


Headers4 = TypeAliasType("Headers4", Union[str, int, float, bool, List[Headers3]])


Headers2TypedDict = TypeAliasType("Headers2TypedDict", Union[str, int, float, bool])


Headers2 = TypeAliasType("Headers2", Union[str, int, float, bool])


Headers5TypedDict = TypeAliasType(
    "Headers5TypedDict",
    Union[str, int, float, bool, List[Headers2TypedDict], Dict[str, Headers4TypedDict]],
)


Headers5 = TypeAliasType(
    "Headers5", Union[str, int, float, bool, List[Headers2], Dict[str, Headers4]]
)


Headers1TypedDict = TypeAliasType("Headers1TypedDict", Union[str, int, float, bool])


Headers1 = TypeAliasType("Headers1", Union[str, int, float, bool])


Headers6TypedDict = TypeAliasType(
    "Headers6TypedDict",
    Union[
        EnvVarConfigTypedDict,
        RunTimeParamTypedDict,
        str,
        int,
        float,
        bool,
        List[Headers1TypedDict],
        Dict[str, Headers5TypedDict],
    ],
)


Headers6 = TypeAliasType(
    "Headers6",
    Union[
        EnvVarConfig,
        RunTimeParam,
        str,
        int,
        float,
        bool,
        List[Headers1],
        Dict[str, Headers5],
    ],
)


Params3TypedDict = TypeAliasType("Params3TypedDict", Union[str, int, float, bool])


Params3 = TypeAliasType("Params3", Union[str, int, float, bool])


Params4TypedDict = TypeAliasType(
    "Params4TypedDict", Union[str, int, float, bool, List[Params3TypedDict]]
)


Params4 = TypeAliasType("Params4", Union[str, int, float, bool, List[Params3]])


Params2TypedDict = TypeAliasType("Params2TypedDict", Union[str, int, float, bool])


Params2 = TypeAliasType("Params2", Union[str, int, float, bool])


Params5TypedDict = TypeAliasType(
    "Params5TypedDict",
    Union[str, int, float, bool, List[Params2TypedDict], Dict[str, Params4TypedDict]],
)


Params5 = TypeAliasType(
    "Params5", Union[str, int, float, bool, List[Params2], Dict[str, Params4]]
)


Params1TypedDict = TypeAliasType("Params1TypedDict", Union[str, int, float, bool])


Params1 = TypeAliasType("Params1", Union[str, int, float, bool])


Params6TypedDict = TypeAliasType(
    "Params6TypedDict",
    Union[
        EnvVarConfigTypedDict,
        RunTimeParamTypedDict,
        str,
        int,
        float,
        bool,
        List[Params1TypedDict],
        Dict[str, Params5TypedDict],
    ],
)


Params6 = TypeAliasType(
    "Params6",
    Union[
        EnvVarConfig,
        RunTimeParam,
        str,
        int,
        float,
        bool,
        List[Params1],
        Dict[str, Params5],
    ],
)


Body3TypedDict = TypeAliasType("Body3TypedDict", Union[str, int, float, bool])


Body3 = TypeAliasType("Body3", Union[str, int, float, bool])


Body4TypedDict = TypeAliasType(
    "Body4TypedDict", Union[str, int, float, bool, List[Body3TypedDict]]
)


Body4 = TypeAliasType("Body4", Union[str, int, float, bool, List[Body3]])


Body2TypedDict = TypeAliasType("Body2TypedDict", Union[str, int, float, bool])


Body2 = TypeAliasType("Body2", Union[str, int, float, bool])


Body5TypedDict = TypeAliasType(
    "Body5TypedDict",
    Union[str, int, float, bool, List[Body2TypedDict], Dict[str, Body4TypedDict]],
)


Body5 = TypeAliasType(
    "Body5", Union[str, int, float, bool, List[Body2], Dict[str, Body4]]
)


Body1TypedDict = TypeAliasType("Body1TypedDict", Union[str, int, float, bool])


Body1 = TypeAliasType("Body1", Union[str, int, float, bool])


Body6TypedDict = TypeAliasType(
    "Body6TypedDict",
    Union[
        EnvVarConfigTypedDict,
        RunTimeParamTypedDict,
        str,
        int,
        float,
        bool,
        List[Body1TypedDict],
        Dict[str, Body5TypedDict],
    ],
)


Body6 = TypeAliasType(
    "Body6",
    Union[
        EnvVarConfig, RunTimeParam, str, int, float, bool, List[Body1], Dict[str, Body5]
    ],
)


class ResponseType(str, Enum):
    JSON = "JSON"
    XML = "XML"
    CSV = "CSV"
    PLAIN_TEXT = "PLAIN_TEXT"


class HTTPSourceTypedDict(TypedDict):
    url: str
    method: NotRequired[Method]
    headers: NotRequired[Dict[str, Headers6TypedDict]]
    params: NotRequired[Dict[str, Params6TypedDict]]
    body: NotRequired[Dict[str, Body6TypedDict]]
    timeout: NotRequired[Nullable[int]]
    retry: NotRequired[RetryPolicyTypedDict]
    response_type: NotRequired[ResponseType]


class HTTPSource(BaseModel):
    url: str

    method: Optional[Method] = Method.GET

    headers: Optional[Dict[str, Headers6]] = None

    params: Optional[Dict[str, Params6]] = None

    body: Optional[Dict[str, Body6]] = None

    timeout: OptionalNullable[int] = UNSET

    retry: Optional[RetryPolicy] = None

    response_type: Optional[ResponseType] = ResponseType.PLAIN_TEXT

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "method",
            "headers",
            "params",
            "body",
            "timeout",
            "retry",
            "response_type",
        ]
        nullable_fields = ["timeout"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
