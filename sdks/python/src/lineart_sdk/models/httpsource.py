"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Optional, Union

from pydantic import model_serializer
from typing_extensions import NotRequired, TypeAliasType, TypedDict

from lineart_sdk.types import (
    UNSET,
    UNSET_SENTINEL,
    BaseModel,
    Nullable,
    OptionalNullable,
)

from .envvarconfig import EnvVarConfig, EnvVarConfigTypedDict
from .retrypolicy import RetryPolicy, RetryPolicyTypedDict
from .runtimeparam import RunTimeParam, RunTimeParamTypedDict


class Method(str, Enum):
    GET = "GET"
    POST = "POST"
    PUT = "PUT"
    DELETE = "DELETE"


Headers1TypedDict = TypeAliasType("Headers1TypedDict", Union[str, int, float, bool])


Headers1 = TypeAliasType("Headers1", Union[str, int, float, bool])


Headers2TypedDict = TypeAliasType(
    "Headers2TypedDict",
    Union[
        EnvVarConfigTypedDict,
        RunTimeParamTypedDict,
        str,
        int,
        float,
        bool,
        List[Headers1TypedDict],
    ],
)


Headers2 = TypeAliasType(
    "Headers2", Union[EnvVarConfig, RunTimeParam, str, int, float, bool, List[Headers1]]
)


Params1TypedDict = TypeAliasType("Params1TypedDict", Union[str, int, float, bool])


Params1 = TypeAliasType("Params1", Union[str, int, float, bool])


Params2TypedDict = TypeAliasType(
    "Params2TypedDict",
    Union[
        EnvVarConfigTypedDict,
        RunTimeParamTypedDict,
        str,
        int,
        float,
        bool,
        List[Params1TypedDict],
    ],
)


Params2 = TypeAliasType(
    "Params2", Union[EnvVarConfig, RunTimeParam, str, int, float, bool, List[Params1]]
)


Body1TypedDict = TypeAliasType("Body1TypedDict", Union[str, int, float, bool])


Body1 = TypeAliasType("Body1", Union[str, int, float, bool])


Body2TypedDict = TypeAliasType(
    "Body2TypedDict",
    Union[
        EnvVarConfigTypedDict,
        RunTimeParamTypedDict,
        str,
        int,
        float,
        bool,
        List[Body1TypedDict],
    ],
)


Body2 = TypeAliasType(
    "Body2", Union[EnvVarConfig, RunTimeParam, str, int, float, bool, List[Body1]]
)


class ResponseType(str, Enum):
    JSON = "JSON"
    XML = "XML"
    CSV = "CSV"
    PLAIN_TEXT = "PLAIN_TEXT"


class HTTPSourceTypedDict(TypedDict):
    url: str
    method: NotRequired[Method]
    headers: NotRequired[Dict[str, Headers2TypedDict]]
    params: NotRequired[Dict[str, Params2TypedDict]]
    body: NotRequired[Dict[str, Body2TypedDict]]
    timeout: NotRequired[Nullable[int]]
    retry: NotRequired[RetryPolicyTypedDict]
    response_type: NotRequired[ResponseType]


class HTTPSource(BaseModel):
    url: str

    method: Optional[Method] = Method.GET

    headers: Optional[Dict[str, Headers2]] = None

    params: Optional[Dict[str, Params2]] = None

    body: Optional[Dict[str, Body2]] = None

    timeout: OptionalNullable[int] = UNSET

    retry: Optional[RetryPolicy] = None

    response_type: Optional[ResponseType] = ResponseType.PLAIN_TEXT

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "method",
            "headers",
            "params",
            "body",
            "timeout",
            "retry",
            "response_type",
        ]
        nullable_fields = ["timeout"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
