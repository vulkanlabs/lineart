"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations

from datetime import datetime
from typing import Union

from pydantic import model_serializer
from typing_extensions import TypeAliasType, TypedDict

from lineart_sdk.types import UNSET_SENTINEL, BaseModel, Nullable

from .dagsterlogdetails import DagsterLogDetails, DagsterLogDetailsTypedDict
from .userlogdetails import UserLogDetails, UserLogDetailsTypedDict

EventTypedDict = TypeAliasType(
    "EventTypedDict", Union[DagsterLogDetailsTypedDict, UserLogDetailsTypedDict]
)


Event = TypeAliasType("Event", Union[DagsterLogDetails, UserLogDetails])


class LogEntryTypedDict(TypedDict):
    timestamp: datetime
    step_key: Nullable[str]
    source: str
    event: EventTypedDict


class LogEntry(BaseModel):
    timestamp: datetime

    step_key: Nullable[str]

    source: str

    event: Event

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["step_key"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
