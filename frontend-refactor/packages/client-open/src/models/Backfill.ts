/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { RunStatus } from "./RunStatus";
import {
  RunStatusFromJSON,
  RunStatusFromJSONTyped,
  RunStatusToJSON,
  RunStatusToJSONTyped,
} from "./RunStatus";

/**
 *
 * @export
 * @interface Backfill
 */
export interface Backfill {
  /**
   *
   * @type {string}
   * @memberof Backfill
   */
  backfill_id: string;
  /**
   *
   * @type {string}
   * @memberof Backfill
   */
  backtest_id: string;
  /**
   *
   * @type {RunStatus}
   * @memberof Backfill
   */
  status: RunStatus;
  /**
   *
   * @type {{ [key: string]: any; }}
   * @memberof Backfill
   */
  config_variables: { [key: string]: any } | null;
  /**
   *
   * @type {Date}
   * @memberof Backfill
   */
  created_at: Date;
  /**
   *
   * @type {Date}
   * @memberof Backfill
   */
  last_updated_at: Date;
}

/**
 * Check if a given object implements the Backfill interface.
 */
export function instanceOfBackfill(value: object): value is Backfill {
  if (!("backfill_id" in value) || value["backfill_id"] === undefined)
    return false;
  if (!("backtest_id" in value) || value["backtest_id"] === undefined)
    return false;
  if (!("status" in value) || value["status"] === undefined) return false;
  if (!("config_variables" in value) || value["config_variables"] === undefined)
    return false;
  if (!("created_at" in value) || value["created_at"] === undefined)
    return false;
  if (!("last_updated_at" in value) || value["last_updated_at"] === undefined)
    return false;
  return true;
}

export function BackfillFromJSON(json: any): Backfill {
  return BackfillFromJSONTyped(json, false);
}

export function BackfillFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): Backfill {
  if (json == null) {
    return json;
  }
  return {
    backfill_id: json["backfill_id"],
    backtest_id: json["backtest_id"],
    status: RunStatusFromJSON(json["status"]),
    config_variables: json["config_variables"],
    created_at: new Date(json["created_at"]),
    last_updated_at: new Date(json["last_updated_at"]),
  };
}

export function BackfillToJSON(json: any): Backfill {
  return BackfillToJSONTyped(json, false);
}

export function BackfillToJSONTyped(
  value?: Backfill | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    backfill_id: value["backfill_id"],
    backtest_id: value["backtest_id"],
    status: RunStatusToJSON(value["status"]),
    config_variables: value["config_variables"],
    created_at: value["created_at"].toISOString(),
    last_updated_at: value["last_updated_at"].toISOString(),
  };
}
