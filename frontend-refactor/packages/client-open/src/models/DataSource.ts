/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { CachingOptions } from "./CachingOptions";
import {
  CachingOptionsFromJSON,
  CachingOptionsFromJSONTyped,
  CachingOptionsToJSON,
  CachingOptionsToJSONTyped,
} from "./CachingOptions";
import type { Source } from "./Source";
import {
  SourceFromJSON,
  SourceFromJSONTyped,
  SourceToJSON,
  SourceToJSONTyped,
} from "./Source";

/**
 *
 * @export
 * @interface DataSource
 */
export interface DataSource {
  /**
   *
   * @type {string}
   * @memberof DataSource
   */
  name: string;
  /**
   *
   * @type {Source}
   * @memberof DataSource
   */
  source: Source;
  /**
   *
   * @type {CachingOptions}
   * @memberof DataSource
   */
  caching?: CachingOptions;
  /**
   *
   * @type {string}
   * @memberof DataSource
   */
  description?: string | null;
  /**
   *
   * @type {{ [key: string]: any; }}
   * @memberof DataSource
   */
  metadata?: { [key: string]: any } | null;
  /**
   *
   * @type {string}
   * @memberof DataSource
   */
  data_source_id: string;
  /**
   *
   * @type {boolean}
   * @memberof DataSource
   */
  archived: boolean;
  /**
   *
   * @type {Date}
   * @memberof DataSource
   */
  created_at: Date;
  /**
   *
   * @type {Date}
   * @memberof DataSource
   */
  last_updated_at: Date;
  /**
   *
   * @type {Array<string>}
   * @memberof DataSource
   */
  variables?: Array<string> | null;
  /**
   *
   * @type {Array<string>}
   * @memberof DataSource
   */
  runtime_params?: Array<string> | null;
}

/**
 * Check if a given object implements the DataSource interface.
 */
export function instanceOfDataSource(value: object): value is DataSource {
  if (!("name" in value) || value["name"] === undefined) return false;
  if (!("source" in value) || value["source"] === undefined) return false;
  if (!("data_source_id" in value) || value["data_source_id"] === undefined)
    return false;
  if (!("archived" in value) || value["archived"] === undefined) return false;
  if (!("created_at" in value) || value["created_at"] === undefined)
    return false;
  if (!("last_updated_at" in value) || value["last_updated_at"] === undefined)
    return false;
  return true;
}

export function DataSourceFromJSON(json: any): DataSource {
  return DataSourceFromJSONTyped(json, false);
}

export function DataSourceFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): DataSource {
  if (json == null) {
    return json;
  }
  return {
    name: json["name"],
    source: SourceFromJSON(json["source"]),
    caching:
      json["caching"] == null
        ? undefined
        : CachingOptionsFromJSON(json["caching"]),
    description: json["description"] == null ? undefined : json["description"],
    metadata: json["metadata"] == null ? undefined : json["metadata"],
    data_source_id: json["data_source_id"],
    archived: json["archived"],
    created_at: new Date(json["created_at"]),
    last_updated_at: new Date(json["last_updated_at"]),
    variables: json["variables"] == null ? undefined : json["variables"],
    runtime_params:
      json["runtime_params"] == null ? undefined : json["runtime_params"],
  };
}

export function DataSourceToJSON(json: any): DataSource {
  return DataSourceToJSONTyped(json, false);
}

export function DataSourceToJSONTyped(
  value?: DataSource | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    name: value["name"],
    source: SourceToJSON(value["source"]),
    caching: CachingOptionsToJSON(value["caching"]),
    description: value["description"],
    metadata: value["metadata"],
    data_source_id: value["data_source_id"],
    archived: value["archived"],
    created_at: value["created_at"].toISOString(),
    last_updated_at: value["last_updated_at"].toISOString(),
    variables: value["variables"],
    runtime_params: value["runtime_params"],
  };
}
