/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { NodeDefinitionDict } from './NodeDefinitionDict';
import {
    NodeDefinitionDictFromJSON,
    NodeDefinitionDictFromJSONTyped,
    NodeDefinitionDictToJSON,
    NodeDefinitionDictToJSONTyped,
} from './NodeDefinitionDict';

/**
 * Dict representation of a PolicyDefinition object.
 * @export
 * @interface PolicyDefinitionDictInput
 */
export interface PolicyDefinitionDictInput {
    /**
     * 
     * @type {Array<NodeDefinitionDict>}
     * @memberof PolicyDefinitionDictInput
     */
    nodes: Array<NodeDefinitionDict>;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof PolicyDefinitionDictInput
     */
    input_schema: { [key: string]: string; };
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyDefinitionDictInput
     */
    config_variables?: Array<string> | null;
}

/**
 * Check if a given object implements the PolicyDefinitionDictInput interface.
 */
export function instanceOfPolicyDefinitionDictInput(value: object): value is PolicyDefinitionDictInput {
    if (!('nodes' in value) || value['nodes'] === undefined) return false;
    if (!('input_schema' in value) || value['input_schema'] === undefined) return false;
    return true;
}

export function PolicyDefinitionDictInputFromJSON(json: any): PolicyDefinitionDictInput {
    return PolicyDefinitionDictInputFromJSONTyped(json, false);
}

export function PolicyDefinitionDictInputFromJSONTyped(json: any, ignoreDiscriminator: boolean): PolicyDefinitionDictInput {
    if (json == null) {
        return json;
    }
    return {
        
        'nodes': ((json['nodes'] as Array<any>).map(NodeDefinitionDictFromJSON)),
        'input_schema': json['input_schema'],
        'config_variables': json['config_variables'] == null ? undefined : json['config_variables'],
    };
}

export function PolicyDefinitionDictInputToJSON(json: any): PolicyDefinitionDictInput {
    return PolicyDefinitionDictInputToJSONTyped(json, false);
}

export function PolicyDefinitionDictInputToJSONTyped(value?: PolicyDefinitionDictInput | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'nodes': ((value['nodes'] as Array<any>).map(NodeDefinitionDictToJSON)),
        'input_schema': value['input_schema'],
        'config_variables': value['config_variables'],
    };
}

