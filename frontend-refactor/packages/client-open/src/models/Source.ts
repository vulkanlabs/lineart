/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { HTTPSource } from './HTTPSource';
import {
    HTTPSourceFromJSON,
    HTTPSourceFromJSONTyped,
    HTTPSourceToJSON,
    HTTPSourceToJSONTyped,
} from './HTTPSource';
import type { LocalFileSource } from './LocalFileSource';
import {
    LocalFileSourceFromJSON,
    LocalFileSourceFromJSONTyped,
    LocalFileSourceToJSON,
    LocalFileSourceToJSONTyped,
} from './LocalFileSource';
import type { HTTPSourceHeadersValue } from './HTTPSourceHeadersValue';
import {
    HTTPSourceHeadersValueFromJSON,
    HTTPSourceHeadersValueFromJSONTyped,
    HTTPSourceHeadersValueToJSON,
    HTTPSourceHeadersValueToJSONTyped,
} from './HTTPSourceHeadersValue';
import type { RegisteredFileSource } from './RegisteredFileSource';
import {
    RegisteredFileSourceFromJSON,
    RegisteredFileSourceFromJSONTyped,
    RegisteredFileSourceToJSON,
    RegisteredFileSourceToJSONTyped,
} from './RegisteredFileSource';
import type { RetryPolicy } from './RetryPolicy';
import {
    RetryPolicyFromJSON,
    RetryPolicyFromJSONTyped,
    RetryPolicyToJSON,
    RetryPolicyToJSONTyped,
} from './RetryPolicy';

/**
 * 
 * @export
 * @interface Source
 */
export interface Source {
    /**
     * 
     * @type {string}
     * @memberof Source
     */
    url: string;
    /**
     * 
     * @type {string}
     * @memberof Source
     */
    method?: string;
    /**
     * 
     * @type {{ [key: string]: HTTPSourceHeadersValue; }}
     * @memberof Source
     */
    headers?: { [key: string]: HTTPSourceHeadersValue; };
    /**
     * 
     * @type {{ [key: string]: HTTPSourceHeadersValue; }}
     * @memberof Source
     */
    params?: { [key: string]: HTTPSourceHeadersValue; };
    /**
     * 
     * @type {{ [key: string]: HTTPSourceHeadersValue; }}
     * @memberof Source
     */
    body?: { [key: string]: HTTPSourceHeadersValue; };
    /**
     * 
     * @type {number}
     * @memberof Source
     */
    timeout?: number;
    /**
     * 
     * @type {RetryPolicy}
     * @memberof Source
     */
    retry?: RetryPolicy;
    /**
     * 
     * @type {string}
     * @memberof Source
     */
    response_type?: string;
    /**
     * 
     * @type {string}
     * @memberof Source
     */
    path: string;
    /**
     * 
     * @type {string}
     * @memberof Source
     */
    file_id: string;
}

/**
 * Check if a given object implements the Source interface.
 */
export function instanceOfSource(value: object): value is Source {
    if (!('url' in value) || value['url'] === undefined) return false;
    if (!('path' in value) || value['path'] === undefined) return false;
    if (!('file_id' in value) || value['file_id'] === undefined) return false;
    return true;
}

export function SourceFromJSON(json: any): Source {
    return SourceFromJSONTyped(json, false);
}

export function SourceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Source {
    if (json == null) {
        return json;
    }
    return {
        
        'url': json['url'],
        'method': json['method'] == null ? undefined : json['method'],
        'headers': json['headers'] == null ? undefined : (mapValues(json['headers'], HTTPSourceHeadersValueFromJSON)),
        'params': json['params'] == null ? undefined : (mapValues(json['params'], HTTPSourceHeadersValueFromJSON)),
        'body': json['body'] == null ? undefined : (mapValues(json['body'], HTTPSourceHeadersValueFromJSON)),
        'timeout': json['timeout'] == null ? undefined : json['timeout'],
        'retry': json['retry'] == null ? undefined : RetryPolicyFromJSON(json['retry']),
        'response_type': json['response_type'] == null ? undefined : json['response_type'],
        'path': json['path'],
        'file_id': json['file_id'],
    };
}

export function SourceToJSON(json: any): Source {
    return SourceToJSONTyped(json, false);
}

export function SourceToJSONTyped(value?: Source | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'url': value['url'],
        'method': value['method'],
        'headers': value['headers'] == null ? undefined : (mapValues(value['headers'], HTTPSourceHeadersValueToJSON)),
        'params': value['params'] == null ? undefined : (mapValues(value['params'], HTTPSourceHeadersValueToJSON)),
        'body': value['body'] == null ? undefined : (mapValues(value['body'], HTTPSourceHeadersValueToJSON)),
        'timeout': value['timeout'],
        'retry': RetryPolicyToJSON(value['retry']),
        'response_type': value['response_type'],
        'path': value['path'],
        'file_id': value['file_id'],
    };
}

