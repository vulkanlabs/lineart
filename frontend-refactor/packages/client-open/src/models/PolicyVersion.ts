/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { PolicyVersionStatus } from "./PolicyVersionStatus";
import {
  PolicyVersionStatusFromJSON,
  PolicyVersionStatusFromJSONTyped,
  PolicyVersionStatusToJSON,
  PolicyVersionStatusToJSONTyped,
} from "./PolicyVersionStatus";
import type { PolicyDefinitionDictOutput } from "./PolicyDefinitionDictOutput";
import {
  PolicyDefinitionDictOutputFromJSON,
  PolicyDefinitionDictOutputFromJSONTyped,
  PolicyDefinitionDictOutputToJSON,
  PolicyDefinitionDictOutputToJSONTyped,
} from "./PolicyDefinitionDictOutput";
import type { UIMetadata } from "./UIMetadata";
import {
  UIMetadataFromJSON,
  UIMetadataFromJSONTyped,
  UIMetadataToJSON,
  UIMetadataToJSONTyped,
} from "./UIMetadata";

/**
 *
 * @export
 * @interface PolicyVersion
 */
export interface PolicyVersion {
  /**
   *
   * @type {string}
   * @memberof PolicyVersion
   */
  policy_version_id: string;
  /**
   *
   * @type {string}
   * @memberof PolicyVersion
   */
  policy_id: string;
  /**
   *
   * @type {string}
   * @memberof PolicyVersion
   */
  alias?: string | null;
  /**
   *
   * @type {PolicyVersionStatus}
   * @memberof PolicyVersion
   */
  status: PolicyVersionStatus;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof PolicyVersion
   */
  input_schema: { [key: string]: string };
  /**
   *
   * @type {PolicyDefinitionDictOutput}
   * @memberof PolicyVersion
   */
  spec: PolicyDefinitionDictOutput;
  /**
   *
   * @type {Array<string>}
   * @memberof PolicyVersion
   */
  requirements: Array<string>;
  /**
   *
   * @type {boolean}
   * @memberof PolicyVersion
   */
  archived: boolean;
  /**
   *
   * @type {Array<string>}
   * @memberof PolicyVersion
   */
  variables?: Array<string> | null;
  /**
   *
   * @type {Date}
   * @memberof PolicyVersion
   */
  created_at: Date;
  /**
   *
   * @type {Date}
   * @memberof PolicyVersion
   */
  last_updated_at: Date;
  /**
   *
   * @type {{ [key: string]: UIMetadata; }}
   * @memberof PolicyVersion
   */
  ui_metadata?: { [key: string]: UIMetadata } | null;
}

/**
 * Check if a given object implements the PolicyVersion interface.
 */
export function instanceOfPolicyVersion(value: object): value is PolicyVersion {
  if (
    !("policy_version_id" in value) ||
    value["policy_version_id"] === undefined
  )
    return false;
  if (!("policy_id" in value) || value["policy_id"] === undefined) return false;
  if (!("status" in value) || value["status"] === undefined) return false;
  if (!("input_schema" in value) || value["input_schema"] === undefined)
    return false;
  if (!("spec" in value) || value["spec"] === undefined) return false;
  if (!("requirements" in value) || value["requirements"] === undefined)
    return false;
  if (!("archived" in value) || value["archived"] === undefined) return false;
  if (!("created_at" in value) || value["created_at"] === undefined)
    return false;
  if (!("last_updated_at" in value) || value["last_updated_at"] === undefined)
    return false;
  return true;
}

export function PolicyVersionFromJSON(json: any): PolicyVersion {
  return PolicyVersionFromJSONTyped(json, false);
}

export function PolicyVersionFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): PolicyVersion {
  if (json == null) {
    return json;
  }
  return {
    policy_version_id: json["policy_version_id"],
    policy_id: json["policy_id"],
    alias: json["alias"] == null ? undefined : json["alias"],
    status: PolicyVersionStatusFromJSON(json["status"]),
    input_schema: json["input_schema"],
    spec: PolicyDefinitionDictOutputFromJSON(json["spec"]),
    requirements: json["requirements"],
    archived: json["archived"],
    variables: json["variables"] == null ? undefined : json["variables"],
    created_at: new Date(json["created_at"]),
    last_updated_at: new Date(json["last_updated_at"]),
    ui_metadata:
      json["ui_metadata"] == null
        ? undefined
        : mapValues(json["ui_metadata"], UIMetadataFromJSON),
  };
}

export function PolicyVersionToJSON(json: any): PolicyVersion {
  return PolicyVersionToJSONTyped(json, false);
}

export function PolicyVersionToJSONTyped(
  value?: PolicyVersion | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    policy_version_id: value["policy_version_id"],
    policy_id: value["policy_id"],
    alias: value["alias"],
    status: PolicyVersionStatusToJSON(value["status"]),
    input_schema: value["input_schema"],
    spec: PolicyDefinitionDictOutputToJSON(value["spec"]),
    requirements: value["requirements"],
    archived: value["archived"],
    variables: value["variables"],
    created_at: value["created_at"].toISOString(),
    last_updated_at: value["last_updated_at"].toISOString(),
    ui_metadata:
      value["ui_metadata"] == null
        ? undefined
        : mapValues(value["ui_metadata"], UIMetadataToJSON),
  };
}
