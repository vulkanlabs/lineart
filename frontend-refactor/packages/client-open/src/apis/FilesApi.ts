/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  SupportedFileFormat,
  UploadedFile,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    SupportedFileFormatFromJSON,
    SupportedFileFormatToJSON,
    UploadedFileFromJSON,
    UploadedFileToJSON,
} from '../models/index';

export interface UploadFileRequest {
    file: Blob;
    fileFormat: SupportedFileFormat;
    schema: string;
    fileName?: string | null;
}

/**
 * 
 */
export class FilesApi extends runtime.BaseAPI {

    /**
     * List Uploaded Files
     */
    async listUploadedFilesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UploadedFile>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/files/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UploadedFileFromJSON));
    }

    /**
     * List Uploaded Files
     */
    async listUploadedFiles(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UploadedFile>> {
        const response = await this.listUploadedFilesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Upload File
     */
    async uploadFileRaw(requestParameters: UploadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadedFile>> {
        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter "file" was null or undefined when calling uploadFile().'
            );
        }

        if (requestParameters['fileFormat'] == null) {
            throw new runtime.RequiredError(
                'fileFormat',
                'Required parameter "fileFormat" was null or undefined when calling uploadFile().'
            );
        }

        if (requestParameters['schema'] == null) {
            throw new runtime.RequiredError(
                'schema',
                'Required parameter "schema" was null or undefined when calling uploadFile().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fileName'] != null) {
            queryParameters['file_name'] = requestParameters['fileName'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        if (requestParameters['fileFormat'] != null) {
            formParams.append('file_format', requestParameters['fileFormat'] as any);
        }

        if (requestParameters['schema'] != null) {
            formParams.append('schema', requestParameters['schema'] as any);
        }


        let urlPath = `/files/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadedFileFromJSON(jsonValue));
    }

    /**
     * Upload File
     */
    async uploadFile(requestParameters: UploadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadedFile> {
        const response = await this.uploadFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
