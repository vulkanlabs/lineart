/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  BodyUpdateRun,
  HTTPValidationError,
  Run,
  RunData,
  RunLogs,
  StepMetadataBase,
} from "../models/index";
import {
  BodyUpdateRunFromJSON,
  BodyUpdateRunToJSON,
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
  RunFromJSON,
  RunToJSON,
  RunDataFromJSON,
  RunDataToJSON,
  RunLogsFromJSON,
  RunLogsToJSON,
  StepMetadataBaseFromJSON,
  StepMetadataBaseToJSON,
} from "../models/index";

export interface GetRunRequest {
  runId: string;
}

export interface GetRunDataRequest {
  runId: string;
}

export interface GetRunLogsRequest {
  runId: string;
}

export interface PublishMetadataRequest {
  runId: string;
  stepMetadataBase: StepMetadataBase;
}

export interface UpdateRunRequest {
  runId: string;
  bodyUpdateRun: BodyUpdateRun;
}

/**
 *
 */
export class RunsApi extends runtime.BaseAPI {
  /**
   * Get Run
   */
  async getRunRaw(
    requestParameters: GetRunRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Run>> {
    if (requestParameters["runId"] == null) {
      throw new runtime.RequiredError(
        "runId",
        'Required parameter "runId" was null or undefined when calling getRun().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/runs/{run_id}`;
    urlPath = urlPath.replace(
      `{${"run_id"}}`,
      encodeURIComponent(String(requestParameters["runId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RunFromJSON(jsonValue),
    );
  }

  /**
   * Get Run
   */
  async getRun(
    requestParameters: GetRunRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Run> {
    const response = await this.getRunRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get Run Data
   */
  async getRunDataRaw(
    requestParameters: GetRunDataRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RunData>> {
    if (requestParameters["runId"] == null) {
      throw new runtime.RequiredError(
        "runId",
        'Required parameter "runId" was null or undefined when calling getRunData().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/runs/{run_id}/data`;
    urlPath = urlPath.replace(
      `{${"run_id"}}`,
      encodeURIComponent(String(requestParameters["runId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RunDataFromJSON(jsonValue),
    );
  }

  /**
   * Get Run Data
   */
  async getRunData(
    requestParameters: GetRunDataRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RunData> {
    const response = await this.getRunDataRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get Run Logs
   */
  async getRunLogsRaw(
    requestParameters: GetRunLogsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RunLogs>> {
    if (requestParameters["runId"] == null) {
      throw new runtime.RequiredError(
        "runId",
        'Required parameter "runId" was null or undefined when calling getRunLogs().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/runs/{run_id}/logs`;
    urlPath = urlPath.replace(
      `{${"run_id"}}`,
      encodeURIComponent(String(requestParameters["runId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RunLogsFromJSON(jsonValue),
    );
  }

  /**
   * Get Run Logs
   */
  async getRunLogs(
    requestParameters: GetRunLogsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RunLogs> {
    const response = await this.getRunLogsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Publish Metadata
   */
  async publishMetadataRaw(
    requestParameters: PublishMetadataRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["runId"] == null) {
      throw new runtime.RequiredError(
        "runId",
        'Required parameter "runId" was null or undefined when calling publishMetadata().',
      );
    }

    if (requestParameters["stepMetadataBase"] == null) {
      throw new runtime.RequiredError(
        "stepMetadataBase",
        'Required parameter "stepMetadataBase" was null or undefined when calling publishMetadata().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/runs/{run_id}/metadata`;
    urlPath = urlPath.replace(
      `{${"run_id"}}`,
      encodeURIComponent(String(requestParameters["runId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: StepMetadataBaseToJSON(requestParameters["stepMetadataBase"]),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Publish Metadata
   */
  async publishMetadata(
    requestParameters: PublishMetadataRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.publishMetadataRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Update Run
   */
  async updateRunRaw(
    requestParameters: UpdateRunRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Run>> {
    if (requestParameters["runId"] == null) {
      throw new runtime.RequiredError(
        "runId",
        'Required parameter "runId" was null or undefined when calling updateRun().',
      );
    }

    if (requestParameters["bodyUpdateRun"] == null) {
      throw new runtime.RequiredError(
        "bodyUpdateRun",
        'Required parameter "bodyUpdateRun" was null or undefined when calling updateRun().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/runs/{run_id}`;
    urlPath = urlPath.replace(
      `{${"run_id"}}`,
      encodeURIComponent(String(requestParameters["runId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: BodyUpdateRunToJSON(requestParameters["bodyUpdateRun"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RunFromJSON(jsonValue),
    );
  }

  /**
   * Update Run
   */
  async updateRun(
    requestParameters: UpdateRunRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Run> {
    const response = await this.updateRunRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
