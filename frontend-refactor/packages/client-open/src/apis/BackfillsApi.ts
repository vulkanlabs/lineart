/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Backfill,
  BackfillStatus,
  HTTPValidationError,
  RunStatus,
} from '../models/index';
import {
    BackfillFromJSON,
    BackfillToJSON,
    BackfillStatusFromJSON,
    BackfillStatusToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    RunStatusFromJSON,
    RunStatusToJSON,
} from '../models/index';

export interface GetBackfillRequest {
    backfillId: string;
}

export interface GetBackfillResultsRequest {
    backfillId: string;
}

export interface GetBackfillStatusRequest {
    backfillId: string;
}

export interface UpdateBackfillRequest {
    backfillId: string;
    status: RunStatus;
    resultsPath: string;
}

/**
 * 
 */
export class BackfillsApi extends runtime.BaseAPI {

    /**
     * Get Backfill
     */
    async getBackfillRaw(requestParameters: GetBackfillRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Backfill>> {
        if (requestParameters['backfillId'] == null) {
            throw new runtime.RequiredError(
                'backfillId',
                'Required parameter "backfillId" was null or undefined when calling getBackfill().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/backfills/{backfill_id}`;
        urlPath = urlPath.replace(`{${"backfill_id"}}`, encodeURIComponent(String(requestParameters['backfillId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BackfillFromJSON(jsonValue));
    }

    /**
     * Get Backfill
     */
    async getBackfill(requestParameters: GetBackfillRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Backfill> {
        const response = await this.getBackfillRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Backfill Results
     */
    async getBackfillResultsRaw(requestParameters: GetBackfillResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['backfillId'] == null) {
            throw new runtime.RequiredError(
                'backfillId',
                'Required parameter "backfillId" was null or undefined when calling getBackfillResults().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/backfills/{backfill_id}/results`;
        urlPath = urlPath.replace(`{${"backfill_id"}}`, encodeURIComponent(String(requestParameters['backfillId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Backfill Results
     */
    async getBackfillResults(requestParameters: GetBackfillResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getBackfillResultsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Backfill Status
     */
    async getBackfillStatusRaw(requestParameters: GetBackfillStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BackfillStatus>> {
        if (requestParameters['backfillId'] == null) {
            throw new runtime.RequiredError(
                'backfillId',
                'Required parameter "backfillId" was null or undefined when calling getBackfillStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/backfills/{backfill_id}/status`;
        urlPath = urlPath.replace(`{${"backfill_id"}}`, encodeURIComponent(String(requestParameters['backfillId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BackfillStatusFromJSON(jsonValue));
    }

    /**
     * Get Backfill Status
     */
    async getBackfillStatus(requestParameters: GetBackfillStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BackfillStatus> {
        const response = await this.getBackfillStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Backfills
     */
    async listBackfillsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Backfill>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/backfills/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BackfillFromJSON));
    }

    /**
     * List Backfills
     */
    async listBackfills(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Backfill>> {
        const response = await this.listBackfillsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update Backfill
     */
    async updateBackfillRaw(requestParameters: UpdateBackfillRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['backfillId'] == null) {
            throw new runtime.RequiredError(
                'backfillId',
                'Required parameter "backfillId" was null or undefined when calling updateBackfill().'
            );
        }

        if (requestParameters['status'] == null) {
            throw new runtime.RequiredError(
                'status',
                'Required parameter "status" was null or undefined when calling updateBackfill().'
            );
        }

        if (requestParameters['resultsPath'] == null) {
            throw new runtime.RequiredError(
                'resultsPath',
                'Required parameter "resultsPath" was null or undefined when calling updateBackfill().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['resultsPath'] != null) {
            queryParameters['results_path'] = requestParameters['resultsPath'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/backfills/{backfill_id}`;
        urlPath = urlPath.replace(`{${"backfill_id"}}`, encodeURIComponent(String(requestParameters['backfillId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Update Backfill
     */
    async updateBackfill(requestParameters: UpdateBackfillRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.updateBackfillRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
