/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  BodyCreateRunGroup,
  BodyRunDurationStatsByPolicy,
  BodyRunDurationStatsByPolicyStatus,
  BodyRunsByPolicy,
  BodyRunsOutcomesByPolicy,
  HTTPValidationError,
  Policy,
  PolicyBase,
  PolicyCreate,
  PolicyVersion,
  Run,
} from "../models/index";
import {
  BodyCreateRunGroupFromJSON,
  BodyCreateRunGroupToJSON,
  BodyRunDurationStatsByPolicyFromJSON,
  BodyRunDurationStatsByPolicyToJSON,
  BodyRunDurationStatsByPolicyStatusFromJSON,
  BodyRunDurationStatsByPolicyStatusToJSON,
  BodyRunsByPolicyFromJSON,
  BodyRunsByPolicyToJSON,
  BodyRunsOutcomesByPolicyFromJSON,
  BodyRunsOutcomesByPolicyToJSON,
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
  PolicyFromJSON,
  PolicyToJSON,
  PolicyBaseFromJSON,
  PolicyBaseToJSON,
  PolicyCreateFromJSON,
  PolicyCreateToJSON,
  PolicyVersionFromJSON,
  PolicyVersionToJSON,
  RunFromJSON,
  RunToJSON,
} from "../models/index";

export interface CreatePolicyRequest {
  policyCreate: PolicyCreate;
}

export interface CreateRunGroupRequest {
  policyId: string;
  bodyCreateRunGroup: BodyCreateRunGroup;
}

export interface DeletePolicyRequest {
  policyId: string;
}

export interface GetPolicyRequest {
  policyId: string;
}

export interface ListPoliciesRequest {
  includeArchived?: boolean;
}

export interface ListRunsByPolicyRequest {
  policyId: string;
  startDate?: Date | null;
  endDate?: Date | null;
}

export interface ListVersionsForPolicyRequest {
  policyId: string;
  includeArchived?: boolean;
}

export interface RunDurationStatsByPolicyRequest {
  policyId: string;
  startDate?: Date | null;
  endDate?: Date | null;
  bodyRunDurationStatsByPolicy?: BodyRunDurationStatsByPolicy;
}

export interface RunDurationStatsByPolicyStatusRequest {
  policyId: string;
  startDate?: Date | null;
  endDate?: Date | null;
  bodyRunDurationStatsByPolicyStatus?: BodyRunDurationStatsByPolicyStatus;
}

export interface RunsByPolicyRequest {
  policyId: string;
  startDate?: Date | null;
  endDate?: Date | null;
  bodyRunsByPolicy?: BodyRunsByPolicy;
}

export interface RunsOutcomesByPolicyRequest {
  policyId: string;
  startDate?: Date | null;
  endDate?: Date | null;
  bodyRunsOutcomesByPolicy?: BodyRunsOutcomesByPolicy;
}

export interface UpdatePolicyRequest {
  policyId: string;
  policyBase: PolicyBase;
}

/**
 *
 */
export class PoliciesApi extends runtime.BaseAPI {
  /**
   * Create Policy
   */
  async createPolicyRaw(
    requestParameters: CreatePolicyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Policy>> {
    if (requestParameters["policyCreate"] == null) {
      throw new runtime.RequiredError(
        "policyCreate",
        'Required parameter "policyCreate" was null or undefined when calling createPolicy().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/policies/`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: PolicyCreateToJSON(requestParameters["policyCreate"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PolicyFromJSON(jsonValue),
    );
  }

  /**
   * Create Policy
   */
  async createPolicy(
    requestParameters: CreatePolicyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Policy> {
    const response = await this.createPolicyRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Create Run Group
   */
  async createRunGroupRaw(
    requestParameters: CreateRunGroupRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["policyId"] == null) {
      throw new runtime.RequiredError(
        "policyId",
        'Required parameter "policyId" was null or undefined when calling createRunGroup().',
      );
    }

    if (requestParameters["bodyCreateRunGroup"] == null) {
      throw new runtime.RequiredError(
        "bodyCreateRunGroup",
        'Required parameter "bodyCreateRunGroup" was null or undefined when calling createRunGroup().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/policies/{policy_id}/runs`;
    urlPath = urlPath.replace(
      `{${"policy_id"}}`,
      encodeURIComponent(String(requestParameters["policyId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: BodyCreateRunGroupToJSON(requestParameters["bodyCreateRunGroup"]),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Create Run Group
   */
  async createRunGroup(
    requestParameters: CreateRunGroupRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.createRunGroupRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Delete Policy
   */
  async deletePolicyRaw(
    requestParameters: DeletePolicyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["policyId"] == null) {
      throw new runtime.RequiredError(
        "policyId",
        'Required parameter "policyId" was null or undefined when calling deletePolicy().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/policies/{policy_id}`;
    urlPath = urlPath.replace(
      `{${"policy_id"}}`,
      encodeURIComponent(String(requestParameters["policyId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Delete Policy
   */
  async deletePolicy(
    requestParameters: DeletePolicyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.deletePolicyRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get Policy
   */
  async getPolicyRaw(
    requestParameters: GetPolicyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Policy>> {
    if (requestParameters["policyId"] == null) {
      throw new runtime.RequiredError(
        "policyId",
        'Required parameter "policyId" was null or undefined when calling getPolicy().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/policies/{policy_id}`;
    urlPath = urlPath.replace(
      `{${"policy_id"}}`,
      encodeURIComponent(String(requestParameters["policyId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PolicyFromJSON(jsonValue),
    );
  }

  /**
   * Get Policy
   */
  async getPolicy(
    requestParameters: GetPolicyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Policy> {
    const response = await this.getPolicyRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * List Policies
   */
  async listPoliciesRaw(
    requestParameters: ListPoliciesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Policy>>> {
    const queryParameters: any = {};

    if (requestParameters["includeArchived"] != null) {
      queryParameters["include_archived"] =
        requestParameters["includeArchived"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/policies/`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(PolicyFromJSON),
    );
  }

  /**
   * List Policies
   */
  async listPolicies(
    requestParameters: ListPoliciesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Policy>> {
    const response = await this.listPoliciesRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * List Runs By Policy
   */
  async listRunsByPolicyRaw(
    requestParameters: ListRunsByPolicyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Run>>> {
    if (requestParameters["policyId"] == null) {
      throw new runtime.RequiredError(
        "policyId",
        'Required parameter "policyId" was null or undefined when calling listRunsByPolicy().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["startDate"] != null) {
      queryParameters["start_date"] = (requestParameters["startDate"] as any)
        .toISOString()
        .substring(0, 10);
    }

    if (requestParameters["endDate"] != null) {
      queryParameters["end_date"] = (requestParameters["endDate"] as any)
        .toISOString()
        .substring(0, 10);
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/policies/{policy_id}/runs`;
    urlPath = urlPath.replace(
      `{${"policy_id"}}`,
      encodeURIComponent(String(requestParameters["policyId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(RunFromJSON),
    );
  }

  /**
   * List Runs By Policy
   */
  async listRunsByPolicy(
    requestParameters: ListRunsByPolicyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Run>> {
    const response = await this.listRunsByPolicyRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * List Versions For Policy
   */
  async listVersionsForPolicyRaw(
    requestParameters: ListVersionsForPolicyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<PolicyVersion>>> {
    if (requestParameters["policyId"] == null) {
      throw new runtime.RequiredError(
        "policyId",
        'Required parameter "policyId" was null or undefined when calling listVersionsForPolicy().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["includeArchived"] != null) {
      queryParameters["include_archived"] =
        requestParameters["includeArchived"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/policies/{policy_id}/versions`;
    urlPath = urlPath.replace(
      `{${"policy_id"}}`,
      encodeURIComponent(String(requestParameters["policyId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(PolicyVersionFromJSON),
    );
  }

  /**
   * List Versions For Policy
   */
  async listVersionsForPolicy(
    requestParameters: ListVersionsForPolicyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<PolicyVersion>> {
    const response = await this.listVersionsForPolicyRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Run Duration Stats By Policy
   */
  async runDurationStatsByPolicyRaw(
    requestParameters: RunDurationStatsByPolicyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<any>>> {
    if (requestParameters["policyId"] == null) {
      throw new runtime.RequiredError(
        "policyId",
        'Required parameter "policyId" was null or undefined when calling runDurationStatsByPolicy().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["startDate"] != null) {
      queryParameters["start_date"] = (requestParameters["startDate"] as any)
        .toISOString()
        .substring(0, 10);
    }

    if (requestParameters["endDate"] != null) {
      queryParameters["end_date"] = (requestParameters["endDate"] as any)
        .toISOString()
        .substring(0, 10);
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/policies/{policy_id}/runs/duration`;
    urlPath = urlPath.replace(
      `{${"policy_id"}}`,
      encodeURIComponent(String(requestParameters["policyId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: BodyRunDurationStatsByPolicyToJSON(
          requestParameters["bodyRunDurationStatsByPolicy"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Run Duration Stats By Policy
   */
  async runDurationStatsByPolicy(
    requestParameters: RunDurationStatsByPolicyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<any>> {
    const response = await this.runDurationStatsByPolicyRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Run Duration Stats By Policy Status
   */
  async runDurationStatsByPolicyStatusRaw(
    requestParameters: RunDurationStatsByPolicyStatusRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<any>>> {
    if (requestParameters["policyId"] == null) {
      throw new runtime.RequiredError(
        "policyId",
        'Required parameter "policyId" was null or undefined when calling runDurationStatsByPolicyStatus().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["startDate"] != null) {
      queryParameters["start_date"] = (requestParameters["startDate"] as any)
        .toISOString()
        .substring(0, 10);
    }

    if (requestParameters["endDate"] != null) {
      queryParameters["end_date"] = (requestParameters["endDate"] as any)
        .toISOString()
        .substring(0, 10);
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/policies/{policy_id}/runs/duration/by_status`;
    urlPath = urlPath.replace(
      `{${"policy_id"}}`,
      encodeURIComponent(String(requestParameters["policyId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: BodyRunDurationStatsByPolicyStatusToJSON(
          requestParameters["bodyRunDurationStatsByPolicyStatus"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Run Duration Stats By Policy Status
   */
  async runDurationStatsByPolicyStatus(
    requestParameters: RunDurationStatsByPolicyStatusRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<any>> {
    const response = await this.runDurationStatsByPolicyStatusRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Runs By Policy
   */
  async runsByPolicyRaw(
    requestParameters: RunsByPolicyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<any>>> {
    if (requestParameters["policyId"] == null) {
      throw new runtime.RequiredError(
        "policyId",
        'Required parameter "policyId" was null or undefined when calling runsByPolicy().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["startDate"] != null) {
      queryParameters["start_date"] = (requestParameters["startDate"] as any)
        .toISOString()
        .substring(0, 10);
    }

    if (requestParameters["endDate"] != null) {
      queryParameters["end_date"] = (requestParameters["endDate"] as any)
        .toISOString()
        .substring(0, 10);
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/policies/{policy_id}/runs/count`;
    urlPath = urlPath.replace(
      `{${"policy_id"}}`,
      encodeURIComponent(String(requestParameters["policyId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: BodyRunsByPolicyToJSON(requestParameters["bodyRunsByPolicy"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Runs By Policy
   */
  async runsByPolicy(
    requestParameters: RunsByPolicyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<any>> {
    const response = await this.runsByPolicyRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Runs Outcomes By Policy
   */
  async runsOutcomesByPolicyRaw(
    requestParameters: RunsOutcomesByPolicyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<any>>> {
    if (requestParameters["policyId"] == null) {
      throw new runtime.RequiredError(
        "policyId",
        'Required parameter "policyId" was null or undefined when calling runsOutcomesByPolicy().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["startDate"] != null) {
      queryParameters["start_date"] = (requestParameters["startDate"] as any)
        .toISOString()
        .substring(0, 10);
    }

    if (requestParameters["endDate"] != null) {
      queryParameters["end_date"] = (requestParameters["endDate"] as any)
        .toISOString()
        .substring(0, 10);
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/policies/{policy_id}/runs/outcomes`;
    urlPath = urlPath.replace(
      `{${"policy_id"}}`,
      encodeURIComponent(String(requestParameters["policyId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: BodyRunsOutcomesByPolicyToJSON(
          requestParameters["bodyRunsOutcomesByPolicy"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Runs Outcomes By Policy
   */
  async runsOutcomesByPolicy(
    requestParameters: RunsOutcomesByPolicyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<any>> {
    const response = await this.runsOutcomesByPolicyRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Update Policy
   */
  async updatePolicyRaw(
    requestParameters: UpdatePolicyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Policy>> {
    if (requestParameters["policyId"] == null) {
      throw new runtime.RequiredError(
        "policyId",
        'Required parameter "policyId" was null or undefined when calling updatePolicy().',
      );
    }

    if (requestParameters["policyBase"] == null) {
      throw new runtime.RequiredError(
        "policyBase",
        'Required parameter "policyBase" was null or undefined when calling updatePolicy().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/policies/{policy_id}`;
    urlPath = urlPath.replace(
      `{${"policy_id"}}`,
      encodeURIComponent(String(requestParameters["policyId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: PolicyBaseToJSON(requestParameters["policyBase"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PolicyFromJSON(jsonValue),
    );
  }

  /**
   * Update Policy
   */
  async updatePolicy(
    requestParameters: UpdatePolicyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Policy> {
    const response = await this.updatePolicyRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
