/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DataBrokerRequest,
  DataBrokerResponse,
  HTTPValidationError,
} from '../models/index';
import {
    DataBrokerRequestFromJSON,
    DataBrokerRequestToJSON,
    DataBrokerResponseFromJSON,
    DataBrokerResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface RequestDataFromBrokerRequest {
    dataBrokerRequest: DataBrokerRequest;
}

/**
 * 
 */
export class DataBrokerApi extends runtime.BaseAPI {

    /**
     * Request Data From Broker
     */
    async requestDataFromBrokerRaw(requestParameters: RequestDataFromBrokerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DataBrokerResponse>> {
        if (requestParameters['dataBrokerRequest'] == null) {
            throw new runtime.RequiredError(
                'dataBrokerRequest',
                'Required parameter "dataBrokerRequest" was null or undefined when calling requestDataFromBroker().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/data-broker/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DataBrokerRequestToJSON(requestParameters['dataBrokerRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DataBrokerResponseFromJSON(jsonValue));
    }

    /**
     * Request Data From Broker
     */
    async requestDataFromBroker(requestParameters: RequestDataFromBrokerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DataBrokerResponse> {
        const response = await this.requestDataFromBrokerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
