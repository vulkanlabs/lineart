services:
  app:
    build:
      context: .
      dockerfile: images/app.Dockerfile
      args:
        PYTHON_VERSION: "3.12"
    env_file:
      - images/app.env
      - .env
    ports:
      - "6001:6001"
    depends_on:
      app-db:
        condition: service_healthy
  app-db:
    image: postgres:16.3
    env_file:
      - images/app-db.env
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}'"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    volumes:
      - postgres_data_app_db:/var/lib/postgresql/data
  beam-launcher:
    build:
      context: .
      dockerfile: images/beam.Dockerfile
      args:
        PYTHON_VERSION: "3.12"
        VULKAN_SERVER_PATH: /app
        VULKAN_HOME: /opt/vulkan
        VULKAN_STAGING_PATH: /opt/staging
        VULKAN_VENVS_PATH: /opt/venvs
        VULKAN_SCRIPTS_PATH: /app/beam-launcher/scripts
    env_file:
      - images/beam.env
    ports:
      - "6002:6002"
    volumes:
      - ${HOME}/.config/gcloud/application_default_credentials.json:/opt/keys/application-default-credentials.json
  dagster:
    build: 
      context: .
      dockerfile: images/dagster.Dockerfile
      args:
        PYTHON_VERSION: "3.12"
        DAGSTER_HOME: /opt/dagster
        DAGSTER_PORT: 3000
        VULKAN_HOME: /opt/vulkan
        VULKAN_PORT: 3001
        VULKAN_SERVER_PATH: /opt/server
        VULKAN_SCRIPTS_PATH: /opt/scripts
        VULKAN_VENVS_PATH: /opt/venvs
    ports:
      - "3000:3000"
      - "3001:3001"
    env_file:
      - images/dagster.env
      - .env
    depends_on:
      dagster-db:
        condition: service_healthy
    volumes:
      - dagster_vulkan_home:/opt/vulkan
      - dagster_venvs:/opt/venvs
  dagster-db:
    build:
      context: .
      dockerfile: images/dagster-db.Dockerfile
      args:
        POSTGRES_VERSION: "16.3"
    restart: always
    env_file:
      - "images/dagster-db.env"
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}'"]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - postgres_data_dagster_db:/var/lib/postgresql/data
  # vulkan-web-app:
  #   build:
  #     context: .
  #     dockerfile: images/vulkan-web-app.Dockerfile
  #     args:
  #       - NEXT_PUBLIC_VULKAN_SERVER_URL=${NEXT_PUBLIC_VULKAN_SERVER_URL}
  #       - NEXT_PUBLIC_STACK_PROJECT_ID=${NEXT_PUBLIC_STACK_PROJECT_ID}
  #       - NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY=${NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY}
  #       - STACK_SECRET_SERVER_KEY=${STACK_SECRET_SERVER_KEY}
  #   ports:
  #     - "3002:3000"
  upload-svc:
    build:
      context: .
      dockerfile: images/upload-svc.Dockerfile
      args:
        PYTHON_VERSION: "3.12"
    env_file:
      - "images/upload-svc.env"
  resolution-svc:
    build: 
      context: .
      dockerfile: images/resolution-svc.Dockerfile
      args:
        PYTHON_VERSION: "3.12"
        VULKAN_HOME: /opt/vulkan
        VULKAN_SERVER_PATH: /opt/server
        VULKAN_SCRIPTS_PATH: /opt/scripts
        VULKAN_VENVS_PATH: /opt/venvs
    env_file:
      - .env
    volumes:
      - resolution_vulkan_home:/opt/vulkan
      - resolution_venvs:/opt/venvs
  # Mock services
  echo:
    image: kennethreitz/httpbin
    env_file:
      - "images/echo.env"
  testdata:
    build:
      context: .
      dockerfile: images/testdata.Dockerfile
      args:
        PYTHON_VERSION: "3.12"


volumes:
  postgres_data_app_db:
  postgres_data_dagster_db:
  dagster_vulkan_home:
  dagster_venvs:
  resolution_vulkan_home:
  resolution_venvs: