services:
  app:
    build:
      context: .
      dockerfile: images/app.Dockerfile
      args:
        PYTHON_VERSION: "3.12"
    env_file:
      - images/app.env
    ports:
      - "6001:6001"
    depends_on:
      app-db:
        condition: service_healthy
  app-db:
    image: postgres:16.3
    env_file:
      - images/app-db.env
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}'"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
  dagster:
    build: 
      context: .
      dockerfile: images/dagster.Dockerfile
      args:
        PYTHON_VERSION: "3.12"
        DAGSTER_HOME: /opt/dagster
        DAGSTER_PORT: 3000
        VULKAN_HOME: /opt
        VULKAN_PORT: 3001
        VULKAN_SCRIPTS_PATH: /opt/scripts
        VULKAN_VENVS_PATH: /opt/venvs
    ports:
      - "3000:3000"
      - "3001:3001"
    env_file:
      - .env
      - images/dagster.env
    depends_on:
      dagster-db:
        condition: service_healthy
  dagster-db:
    build:
      context: .
      dockerfile: images/dagster-db.Dockerfile
      args:
        POSTGRES_VERSION: "16.3"
    restart: always
    env_file:
      - "images/dagster-db.env"
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}'"]
      interval: 10s
      timeout: 5s
      retries: 10
  # Mock services
  echo:
    image: kennethreitz/httpbin
    env_file:
      - "images/echo.env"
  testdata:
    build:
      context: .
      dockerfile: images/testdata.Dockerfile
      args:
        PYTHON_VERSION: "3.12"
